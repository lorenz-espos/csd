
esame1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004150  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004310  08004310  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004310  08004310  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004310  08004310  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004310  08004310  00014310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004314  08004314  00014314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000003fc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000408  20000408  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010328  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000223a  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  000325a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ad8  00000000  00000000  00033140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d2f4  00000000  00000000  00033c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f3cb  00000000  00000000  00050f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aeeef  00000000  00000000  000602d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010f1c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f94  00000000  00000000  0010f218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080042c0 	.word	0x080042c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080042c0 	.word	0x080042c0

080001c8 <led_on>:
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_UART5_Init(void);
static void MX_USB_PCD_Init(void);
/* USER CODE BEGIN PFP */
void led_on(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 80001cc:	2201      	movs	r2, #1
 80001ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001d2:	4817      	ldr	r0, [pc, #92]	; (8000230 <led_on+0x68>)
 80001d4:	f001 f82a 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80001d8:	2201      	movs	r2, #1
 80001da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001de:	4814      	ldr	r0, [pc, #80]	; (8000230 <led_on+0x68>)
 80001e0:	f001 f824 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80001e4:	2201      	movs	r2, #1
 80001e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ea:	4811      	ldr	r0, [pc, #68]	; (8000230 <led_on+0x68>)
 80001ec:	f001 f81e 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80001f0:	2201      	movs	r2, #1
 80001f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001f6:	480e      	ldr	r0, [pc, #56]	; (8000230 <led_on+0x68>)
 80001f8:	f001 f818 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000202:	480b      	ldr	r0, [pc, #44]	; (8000230 <led_on+0x68>)
 8000204:	f001 f812 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8000208:	2201      	movs	r2, #1
 800020a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800020e:	4808      	ldr	r0, [pc, #32]	; (8000230 <led_on+0x68>)
 8000210:	f001 f80c 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000214:	2201      	movs	r2, #1
 8000216:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800021a:	4805      	ldr	r0, [pc, #20]	; (8000230 <led_on+0x68>)
 800021c:	f001 f806 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8000220:	2201      	movs	r2, #1
 8000222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000226:	4802      	ldr	r0, [pc, #8]	; (8000230 <led_on+0x68>)
 8000228:	f001 f800 	bl	800122c <HAL_GPIO_WritePin>
};
 800022c:	bf00      	nop
 800022e:	bd80      	pop	{r7, pc}
 8000230:	48001000 	.word	0x48001000

08000234 <led_off>:
void led_off(){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800023e:	4817      	ldr	r0, [pc, #92]	; (800029c <led_off+0x68>)
 8000240:	f000 fff4 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 7100 	mov.w	r1, #512	; 0x200
 800024a:	4814      	ldr	r0, [pc, #80]	; (800029c <led_off+0x68>)
 800024c:	f000 ffee 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000250:	2200      	movs	r2, #0
 8000252:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000256:	4811      	ldr	r0, [pc, #68]	; (800029c <led_off+0x68>)
 8000258:	f000 ffe8 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000262:	480e      	ldr	r0, [pc, #56]	; (800029c <led_off+0x68>)
 8000264:	f000 ffe2 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800026e:	480b      	ldr	r0, [pc, #44]	; (800029c <led_off+0x68>)
 8000270:	f000 ffdc 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800027a:	4808      	ldr	r0, [pc, #32]	; (800029c <led_off+0x68>)
 800027c:	f000 ffd6 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000286:	4805      	ldr	r0, [pc, #20]	; (800029c <led_off+0x68>)
 8000288:	f000 ffd0 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000292:	4802      	ldr	r0, [pc, #8]	; (800029c <led_off+0x68>)
 8000294:	f000 ffca 	bl	800122c <HAL_GPIO_WritePin>
};
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	48001000 	.word	0x48001000

080002a0 <led_ext_on>:
void led_ext_on(){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, GPIO_PIN_SET);
 80002a4:	2201      	movs	r2, #1
 80002a6:	2102      	movs	r1, #2
 80002a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ac:	f000 ffbe 	bl	800122c <HAL_GPIO_WritePin>

}
 80002b0:	bf00      	nop
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <led_ext_off>:
void led_ext_off(){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, GPIO_PIN_RESET);
 80002b8:	2200      	movs	r2, #0
 80002ba:	2102      	movs	r1, #2
 80002bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c0:	f000 ffb4 	bl	800122c <HAL_GPIO_WritePin>

}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <led_ext_on2>:

void led_ext_on2(){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, GPIO_PIN_SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	2102      	movs	r1, #2
 80002d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d4:	f000 ffaa 	bl	800122c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOC,GPIO_PIN_15, GPIO_PIN_SET);
 80002d8:	2201      	movs	r2, #1
 80002da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002de:	4802      	ldr	r0, [pc, #8]	; (80002e8 <led_ext_on2+0x20>)
 80002e0:	f000 ffa4 	bl	800122c <HAL_GPIO_WritePin>

}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	48000800 	.word	0x48000800

080002ec <led_ext_off2>:
void led_ext_off2(){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, GPIO_PIN_RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2102      	movs	r1, #2
 80002f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f8:	f000 ff98 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_15, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000302:	4802      	ldr	r0, [pc, #8]	; (800030c <led_ext_off2+0x20>)
 8000304:	f000 ff92 	bl	800122c <HAL_GPIO_WritePin>


}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	48000800 	.word	0x48000800

08000310 <delay_manuale>:

void delay_manuale(){
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
	for(int i=0;i<1000000;i++){
 8000316:	2300      	movs	r3, #0
 8000318:	607b      	str	r3, [r7, #4]
 800031a:	e002      	b.n	8000322 <delay_manuale+0x12>
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	3301      	adds	r3, #1
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a04      	ldr	r2, [pc, #16]	; (8000338 <delay_manuale+0x28>)
 8000326:	4293      	cmp	r3, r2
 8000328:	ddf8      	ble.n	800031c <delay_manuale+0xc>

	}
}
 800032a:	bf00      	nop
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	000f423f 	.word	0x000f423f

0800033c <blink>:

void blink(){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8000340:	2201      	movs	r2, #1
 8000342:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000346:	483e      	ldr	r0, [pc, #248]	; (8000440 <blink+0x104>)
 8000348:	f000 ff70 	bl	800122c <HAL_GPIO_WritePin>
	//HAL_Delay(100);
	delay_manuale();
 800034c:	f7ff ffe0 	bl	8000310 <delay_manuale>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8000350:	2201      	movs	r2, #1
 8000352:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000356:	483a      	ldr	r0, [pc, #232]	; (8000440 <blink+0x104>)
 8000358:	f000 ff68 	bl	800122c <HAL_GPIO_WritePin>
	//HAL_Delay(100);
	delay_manuale();
 800035c:	f7ff ffd8 	bl	8000310 <delay_manuale>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8000360:	2201      	movs	r2, #1
 8000362:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000366:	4836      	ldr	r0, [pc, #216]	; (8000440 <blink+0x104>)
 8000368:	f000 ff60 	bl	800122c <HAL_GPIO_WritePin>
	//HAL_Delay(100);
	delay_manuale();
 800036c:	f7ff ffd0 	bl	8000310 <delay_manuale>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000370:	2201      	movs	r2, #1
 8000372:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000376:	4832      	ldr	r0, [pc, #200]	; (8000440 <blink+0x104>)
 8000378:	f000 ff58 	bl	800122c <HAL_GPIO_WritePin>
	//HAL_Delay(100);
	delay_manuale();
 800037c:	f7ff ffc8 	bl	8000310 <delay_manuale>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8000380:	2201      	movs	r2, #1
 8000382:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000386:	482e      	ldr	r0, [pc, #184]	; (8000440 <blink+0x104>)
 8000388:	f000 ff50 	bl	800122c <HAL_GPIO_WritePin>
	//HAL_Delay(100);
	delay_manuale();
 800038c:	f7ff ffc0 	bl	8000310 <delay_manuale>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8000390:	2201      	movs	r2, #1
 8000392:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000396:	482a      	ldr	r0, [pc, #168]	; (8000440 <blink+0x104>)
 8000398:	f000 ff48 	bl	800122c <HAL_GPIO_WritePin>
	//HAL_Delay(100);
	delay_manuale();
 800039c:	f7ff ffb8 	bl	8000310 <delay_manuale>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003a6:	4826      	ldr	r0, [pc, #152]	; (8000440 <blink+0x104>)
 80003a8:	f000 ff40 	bl	800122c <HAL_GPIO_WritePin>
	delay_manuale();
 80003ac:	f7ff ffb0 	bl	8000310 <delay_manuale>
	//HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 80003b0:	2201      	movs	r2, #1
 80003b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003b6:	4822      	ldr	r0, [pc, #136]	; (8000440 <blink+0x104>)
 80003b8:	f000 ff38 	bl	800122c <HAL_GPIO_WritePin>
	//HAL_Delay(500);
	delay_manuale();
 80003bc:	f7ff ffa8 	bl	8000310 <delay_manuale>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003c6:	481e      	ldr	r0, [pc, #120]	; (8000440 <blink+0x104>)
 80003c8:	f000 ff30 	bl	800122c <HAL_GPIO_WritePin>
	//HAL_Delay(100);
	delay_manuale();
 80003cc:	f7ff ffa0 	bl	8000310 <delay_manuale>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003d6:	481a      	ldr	r0, [pc, #104]	; (8000440 <blink+0x104>)
 80003d8:	f000 ff28 	bl	800122c <HAL_GPIO_WritePin>
	//HAL_Delay(100);
	delay_manuale();
 80003dc:	f7ff ff98 	bl	8000310 <delay_manuale>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e6:	4816      	ldr	r0, [pc, #88]	; (8000440 <blink+0x104>)
 80003e8:	f000 ff20 	bl	800122c <HAL_GPIO_WritePin>
	//HAL_Delay(100);
	delay_manuale();
 80003ec:	f7ff ff90 	bl	8000310 <delay_manuale>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003f6:	4812      	ldr	r0, [pc, #72]	; (8000440 <blink+0x104>)
 80003f8:	f000 ff18 	bl	800122c <HAL_GPIO_WritePin>
	//HAL_Delay(100);
	delay_manuale();
 80003fc:	f7ff ff88 	bl	8000310 <delay_manuale>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000406:	480e      	ldr	r0, [pc, #56]	; (8000440 <blink+0x104>)
 8000408:	f000 ff10 	bl	800122c <HAL_GPIO_WritePin>
	//HAL_Delay(100);
	delay_manuale();
 800040c:	f7ff ff80 	bl	8000310 <delay_manuale>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000416:	480a      	ldr	r0, [pc, #40]	; (8000440 <blink+0x104>)
 8000418:	f000 ff08 	bl	800122c <HAL_GPIO_WritePin>
	//HAL_Delay(100);
	delay_manuale();
 800041c:	f7ff ff78 	bl	8000310 <delay_manuale>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000426:	4806      	ldr	r0, [pc, #24]	; (8000440 <blink+0x104>)
 8000428:	f000 ff00 	bl	800122c <HAL_GPIO_WritePin>
	delay_manuale();
 800042c:	f7ff ff70 	bl	8000310 <delay_manuale>
	//HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000436:	4802      	ldr	r0, [pc, #8]	; (8000440 <blink+0x104>)
 8000438:	f000 fef8 	bl	800122c <HAL_GPIO_WritePin>

}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	48001000 	.word	0x48001000

08000444 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	if(msg==0){
 800044c:	4b20      	ldr	r3, [pc, #128]	; (80004d0 <HAL_UART_RxCpltCallback+0x8c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d108      	bne.n	8000466 <HAL_UART_RxCpltCallback+0x22>
	led_off();
 8000454:	f7ff feee 	bl	8000234 <led_off>
	led_ext_off2();
 8000458:	f7ff ff48 	bl	80002ec <led_ext_off2>
	HAL_UART_Receive_IT(&huart5, (uint8_t*) &msg, sizeof(uint32_t));
 800045c:	2204      	movs	r2, #4
 800045e:	491c      	ldr	r1, [pc, #112]	; (80004d0 <HAL_UART_RxCpltCallback+0x8c>)
 8000460:	481c      	ldr	r0, [pc, #112]	; (80004d4 <HAL_UART_RxCpltCallback+0x90>)
 8000462:	f002 fcea 	bl	8002e3a <HAL_UART_Receive_IT>

	}
	if(msg==1){
 8000466:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <HAL_UART_RxCpltCallback+0x8c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d106      	bne.n	800047c <HAL_UART_RxCpltCallback+0x38>
	led_on();
 800046e:	f7ff feab 	bl	80001c8 <led_on>
	HAL_UART_Receive_IT(&huart5, (uint8_t*) &msg, sizeof(uint32_t));
 8000472:	2204      	movs	r2, #4
 8000474:	4916      	ldr	r1, [pc, #88]	; (80004d0 <HAL_UART_RxCpltCallback+0x8c>)
 8000476:	4817      	ldr	r0, [pc, #92]	; (80004d4 <HAL_UART_RxCpltCallback+0x90>)
 8000478:	f002 fcdf 	bl	8002e3a <HAL_UART_Receive_IT>

	}
	if (msg==2){
 800047c:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <HAL_UART_RxCpltCallback+0x8c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b02      	cmp	r3, #2
 8000482:	d108      	bne.n	8000496 <HAL_UART_RxCpltCallback+0x52>
	led_off();
 8000484:	f7ff fed6 	bl	8000234 <led_off>
	led_ext_on();
 8000488:	f7ff ff0a 	bl	80002a0 <led_ext_on>
	HAL_UART_Receive_IT(&huart5, (uint8_t*) &msg, sizeof(uint32_t));
 800048c:	2204      	movs	r2, #4
 800048e:	4910      	ldr	r1, [pc, #64]	; (80004d0 <HAL_UART_RxCpltCallback+0x8c>)
 8000490:	4810      	ldr	r0, [pc, #64]	; (80004d4 <HAL_UART_RxCpltCallback+0x90>)
 8000492:	f002 fcd2 	bl	8002e3a <HAL_UART_Receive_IT>

	}
	if (msg==3){
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <HAL_UART_RxCpltCallback+0x8c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b03      	cmp	r3, #3
 800049c:	d108      	bne.n	80004b0 <HAL_UART_RxCpltCallback+0x6c>
		led_ext_off();
 800049e:	f7ff ff09 	bl	80002b4 <led_ext_off>
		blink();
 80004a2:	f7ff ff4b 	bl	800033c <blink>
		HAL_UART_Receive_IT(&huart5, (uint8_t*) &msg, sizeof(uint32_t));
 80004a6:	2204      	movs	r2, #4
 80004a8:	4909      	ldr	r1, [pc, #36]	; (80004d0 <HAL_UART_RxCpltCallback+0x8c>)
 80004aa:	480a      	ldr	r0, [pc, #40]	; (80004d4 <HAL_UART_RxCpltCallback+0x90>)
 80004ac:	f002 fcc5 	bl	8002e3a <HAL_UART_Receive_IT>

		}
	if (msg==4){
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <HAL_UART_RxCpltCallback+0x8c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2b04      	cmp	r3, #4
 80004b6:	d106      	bne.n	80004c6 <HAL_UART_RxCpltCallback+0x82>
		led_ext_on2();
 80004b8:	f7ff ff06 	bl	80002c8 <led_ext_on2>
		HAL_UART_Receive_IT(&huart5, (uint8_t*) &msg, sizeof(uint32_t));
 80004bc:	2204      	movs	r2, #4
 80004be:	4904      	ldr	r1, [pc, #16]	; (80004d0 <HAL_UART_RxCpltCallback+0x8c>)
 80004c0:	4804      	ldr	r0, [pc, #16]	; (80004d4 <HAL_UART_RxCpltCallback+0x90>)
 80004c2:	f002 fcba 	bl	8002e3a <HAL_UART_Receive_IT>
	}
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000400 	.word	0x20000400
 80004d4:	2000008c 	.word	0x2000008c

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fb3e 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f812 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f900 	bl	80006e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004e8:	f000 f86e 	bl	80005c8 <MX_SPI1_Init>
  MX_UART5_Init();
 80004ec:	f000 f8aa 	bl	8000644 <MX_UART5_Init>
  MX_USB_PCD_Init();
 80004f0:	f000 f8d8 	bl	80006a4 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
HAL_UART_Receive_IT(&huart5, (uint8_t*) &msg, sizeof(uint32_t));
 80004f4:	2204      	movs	r2, #4
 80004f6:	4902      	ldr	r1, [pc, #8]	; (8000500 <main+0x28>)
 80004f8:	4802      	ldr	r0, [pc, #8]	; (8000504 <main+0x2c>)
 80004fa:	f002 fc9e 	bl	8002e3a <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fe:	e7fe      	b.n	80004fe <main+0x26>
 8000500:	20000400 	.word	0x20000400
 8000504:	2000008c 	.word	0x2000008c

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b09e      	sub	sp, #120	; 0x78
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000512:	2228      	movs	r2, #40	; 0x28
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f003 feca 	bl	80042b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800052c:	463b      	mov	r3, r7
 800052e:	223c      	movs	r2, #60	; 0x3c
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f003 febc 	bl	80042b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000538:	2301      	movs	r3, #1
 800053a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800053c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000540:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000546:	2301      	movs	r3, #1
 8000548:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054a:	2302      	movs	r3, #2
 800054c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000552:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000554:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000558:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800055e:	4618      	mov	r0, r3
 8000560:	f000 ff4e 	bl	8001400 <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800056a:	f000 f96d 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	230f      	movs	r3, #15
 8000570:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	2302      	movs	r3, #2
 8000574:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800057a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000584:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000588:	2101      	movs	r1, #1
 800058a:	4618      	mov	r0, r3
 800058c:	f001 ff76 	bl	800247c <HAL_RCC_ClockConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000596:	f000 f957 	bl	8000848 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART5;
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <SystemClock_Config+0xbc>)
 800059c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80005a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a8:	463b      	mov	r3, r7
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 f99c 	bl	80028e8 <HAL_RCCEx_PeriphCLKConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005b6:	f000 f947 	bl	8000848 <Error_Handler>
  }
}
 80005ba:	bf00      	nop
 80005bc:	3778      	adds	r7, #120	; 0x78
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	00020010 	.word	0x00020010

080005c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005cc:	4b1b      	ldr	r3, [pc, #108]	; (800063c <MX_SPI1_Init+0x74>)
 80005ce:	4a1c      	ldr	r2, [pc, #112]	; (8000640 <MX_SPI1_Init+0x78>)
 80005d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_SPI1_Init+0x74>)
 80005d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <MX_SPI1_Init+0x74>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80005e0:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_SPI1_Init+0x74>)
 80005e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80005e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_SPI1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_SPI1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_SPI1_Init+0x74>)
 80005f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_SPI1_Init+0x74>)
 80005fe:	2208      	movs	r2, #8
 8000600:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_SPI1_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_SPI1_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_SPI1_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_SPI1_Init+0x74>)
 8000616:	2207      	movs	r2, #7
 8000618:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_SPI1_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_SPI1_Init+0x74>)
 8000622:	2208      	movs	r2, #8
 8000624:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_SPI1_Init+0x74>)
 8000628:	f002 fb0e 	bl	8002c48 <HAL_SPI_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000632:	f000 f909 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000028 	.word	0x20000028
 8000640:	40013000 	.word	0x40013000

08000644 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_UART5_Init+0x58>)
 800064a:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <MX_UART5_Init+0x5c>)
 800064c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 10500;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_UART5_Init+0x58>)
 8000650:	f642 1204 	movw	r2, #10500	; 0x2904
 8000654:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_UART5_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_UART5_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_UART5_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_UART5_Init+0x58>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_UART5_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_UART5_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_UART5_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_UART5_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_UART5_Init+0x58>)
 8000688:	f002 fb89 	bl	8002d9e <HAL_UART_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000692:	f000 f8d9 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000008c 	.word	0x2000008c
 80006a0:	40005000 	.word	0x40005000

080006a4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80006a8:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <MX_USB_PCD_Init+0x3c>)
 80006aa:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <MX_USB_PCD_Init+0x40>)
 80006ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_USB_PCD_Init+0x3c>)
 80006b0:	2208      	movs	r2, #8
 80006b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <MX_USB_PCD_Init+0x3c>)
 80006b6:	2202      	movs	r2, #2
 80006b8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_USB_PCD_Init+0x3c>)
 80006bc:	2202      	movs	r2, #2
 80006be:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <MX_USB_PCD_Init+0x3c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_USB_PCD_Init+0x3c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_USB_PCD_Init+0x3c>)
 80006ce:	f000 fdc5 	bl	800125c <HAL_PCD_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80006d8:	f000 f8b6 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000114 	.word	0x20000114
 80006e4:	40005c00 	.word	0x40005c00

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fe:	4b4f      	ldr	r3, [pc, #316]	; (800083c <MX_GPIO_Init+0x154>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	4a4e      	ldr	r2, [pc, #312]	; (800083c <MX_GPIO_Init+0x154>)
 8000704:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000708:	6153      	str	r3, [r2, #20]
 800070a:	4b4c      	ldr	r3, [pc, #304]	; (800083c <MX_GPIO_Init+0x154>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4b49      	ldr	r3, [pc, #292]	; (800083c <MX_GPIO_Init+0x154>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	4a48      	ldr	r2, [pc, #288]	; (800083c <MX_GPIO_Init+0x154>)
 800071c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000720:	6153      	str	r3, [r2, #20]
 8000722:	4b46      	ldr	r3, [pc, #280]	; (800083c <MX_GPIO_Init+0x154>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800072e:	4b43      	ldr	r3, [pc, #268]	; (800083c <MX_GPIO_Init+0x154>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a42      	ldr	r2, [pc, #264]	; (800083c <MX_GPIO_Init+0x154>)
 8000734:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000738:	6153      	str	r3, [r2, #20]
 800073a:	4b40      	ldr	r3, [pc, #256]	; (800083c <MX_GPIO_Init+0x154>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b3d      	ldr	r3, [pc, #244]	; (800083c <MX_GPIO_Init+0x154>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	4a3c      	ldr	r2, [pc, #240]	; (800083c <MX_GPIO_Init+0x154>)
 800074c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000750:	6153      	str	r3, [r2, #20]
 8000752:	4b3a      	ldr	r3, [pc, #232]	; (800083c <MX_GPIO_Init+0x154>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075e:	4b37      	ldr	r3, [pc, #220]	; (800083c <MX_GPIO_Init+0x154>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a36      	ldr	r2, [pc, #216]	; (800083c <MX_GPIO_Init+0x154>)
 8000764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000768:	6153      	str	r3, [r2, #20]
 800076a:	4b34      	ldr	r3, [pc, #208]	; (800083c <MX_GPIO_Init+0x154>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000776:	2200      	movs	r2, #0
 8000778:	f64f 7108 	movw	r1, #65288	; 0xff08
 800077c:	4830      	ldr	r0, [pc, #192]	; (8000840 <MX_GPIO_Init+0x158>)
 800077e:	f000 fd55 	bl	800122c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_giallo_GPIO_Port, led_giallo_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000788:	482e      	ldr	r0, [pc, #184]	; (8000844 <MX_GPIO_Init+0x15c>)
 800078a:	f000 fd4f 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2102      	movs	r1, #2
 8000792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000796:	f000 fd49 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(o_GPIO_Port, o_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2101      	movs	r1, #1
 800079e:	4828      	ldr	r0, [pc, #160]	; (8000840 <MX_GPIO_Init+0x158>)
 80007a0:	f000 fd44 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 80007a4:	2336      	movs	r3, #54	; 0x36
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007a8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	4821      	ldr	r0, [pc, #132]	; (8000840 <MX_GPIO_Init+0x158>)
 80007ba:	f000 fbbd 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80007be:	f64f 7308 	movw	r3, #65288	; 0xff08
 80007c2:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	481a      	ldr	r0, [pc, #104]	; (8000840 <MX_GPIO_Init+0x158>)
 80007d8:	f000 fbae 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_giallo_Pin */
  GPIO_InitStruct.Pin = led_giallo_Pin;
 80007dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_giallo_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4813      	ldr	r0, [pc, #76]	; (8000844 <MX_GPIO_Init+0x15c>)
 80007f6:	f000 fb9f 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_verde_Pin */
  GPIO_InitStruct.Pin = led_verde_Pin;
 80007fa:	2302      	movs	r3, #2
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_verde_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f000 fb90 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : o_Pin */
  GPIO_InitStruct.Pin = o_Pin;
 8000818:	2301      	movs	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(o_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	4804      	ldr	r0, [pc, #16]	; (8000840 <MX_GPIO_Init+0x158>)
 8000830:	f000 fb82 	bl	8000f38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40021000 	.word	0x40021000
 8000840:	48001000 	.word	0x48001000
 8000844:	48000800 	.word	0x48000800

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	e7fe      	b.n	8000850 <Error_Handler+0x8>
	...

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x44>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <HAL_MspInit+0x44>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6193      	str	r3, [r2, #24]
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_MspInit+0x44>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_MspInit+0x44>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	4a08      	ldr	r2, [pc, #32]	; (8000898 <HAL_MspInit+0x44>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	61d3      	str	r3, [r2, #28]
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_MspInit+0x44>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800088a:	2007      	movs	r0, #7
 800088c:	f000 fa9c 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000

0800089c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a17      	ldr	r2, [pc, #92]	; (8000918 <HAL_SPI_MspInit+0x7c>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d128      	bne.n	8000910 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <HAL_SPI_MspInit+0x80>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	4a16      	ldr	r2, [pc, #88]	; (800091c <HAL_SPI_MspInit+0x80>)
 80008c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008c8:	6193      	str	r3, [r2, #24]
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <HAL_SPI_MspInit+0x80>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_SPI_MspInit+0x80>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a10      	ldr	r2, [pc, #64]	; (800091c <HAL_SPI_MspInit+0x80>)
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	6153      	str	r3, [r2, #20]
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_SPI_MspInit+0x80>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80008ee:	23e0      	movs	r3, #224	; 0xe0
 80008f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008fe:	2305      	movs	r3, #5
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090c:	f000 fb14 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	; 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40013000 	.word	0x40013000
 800091c:	40021000 	.word	0x40021000

08000920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a29      	ldr	r2, [pc, #164]	; (80009e4 <HAL_UART_MspInit+0xc4>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d14c      	bne.n	80009dc <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000942:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <HAL_UART_MspInit+0xc8>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	4a28      	ldr	r2, [pc, #160]	; (80009e8 <HAL_UART_MspInit+0xc8>)
 8000948:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800094c:	61d3      	str	r3, [r2, #28]
 800094e:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <HAL_UART_MspInit+0xc8>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <HAL_UART_MspInit+0xc8>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	4a22      	ldr	r2, [pc, #136]	; (80009e8 <HAL_UART_MspInit+0xc8>)
 8000960:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000964:	6153      	str	r3, [r2, #20]
 8000966:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <HAL_UART_MspInit+0xc8>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <HAL_UART_MspInit+0xc8>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <HAL_UART_MspInit+0xc8>)
 8000978:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800097c:	6153      	str	r3, [r2, #20]
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <HAL_UART_MspInit+0xc8>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800098a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800099c:	2305      	movs	r3, #5
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	4811      	ldr	r0, [pc, #68]	; (80009ec <HAL_UART_MspInit+0xcc>)
 80009a8:	f000 fac6 	bl	8000f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009ac:	2304      	movs	r3, #4
 80009ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80009bc:	2305      	movs	r3, #5
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	480a      	ldr	r0, [pc, #40]	; (80009f0 <HAL_UART_MspInit+0xd0>)
 80009c8:	f000 fab6 	bl	8000f38 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2100      	movs	r1, #0
 80009d0:	2035      	movs	r0, #53	; 0x35
 80009d2:	f000 fa04 	bl	8000dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80009d6:	2035      	movs	r0, #53	; 0x35
 80009d8:	f000 fa1d 	bl	8000e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	; 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40005000 	.word	0x40005000
 80009e8:	40021000 	.word	0x40021000
 80009ec:	48000800 	.word	0x48000800
 80009f0:	48000c00 	.word	0x48000c00

080009f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <HAL_PCD_MspInit+0x80>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d129      	bne.n	8000a6a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_PCD_MspInit+0x84>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <HAL_PCD_MspInit+0x84>)
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	6153      	str	r3, [r2, #20]
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_PCD_MspInit+0x84>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000a40:	230e      	movs	r3, #14
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4e:	f000 fa73 	bl	8000f38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_PCD_MspInit+0x84>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_PCD_MspInit+0x84>)
 8000a58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a5c:	61d3      	str	r3, [r2, #28]
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_PCD_MspInit+0x84>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40005c00 	.word	0x40005c00
 8000a78:	40021000 	.word	0x40021000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f88e 	bl	8000be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <UART5_IRQHandler+0x10>)
 8000ad6:	f002 f9f5 	bl	8002ec4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000008c 	.word	0x2000008c

08000ae4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <Reset_Handler>:
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopForever+0x2>
 8000b0c:	f7ff ffea 	bl	8000ae4 <SystemInit>
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <LoopForever+0x6>)
 8000b12:	490d      	ldr	r1, [pc, #52]	; (8000b48 <LoopForever+0xa>)
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <LoopForever+0xe>)
 8000b16:	2300      	movs	r3, #0
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:
 8000b1a:	58d4      	ldr	r4, [r2, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:
 8000b20:	18c4      	adds	r4, r0, r3
 8000b22:	428c      	cmp	r4, r1
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <LoopForever+0x12>)
 8000b28:	4c0a      	ldr	r4, [pc, #40]	; (8000b54 <LoopForever+0x16>)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>
 8000b36:	f003 fb97 	bl	8004268 <__libc_init_array>
 8000b3a:	f7ff fccd 	bl	80004d8 <main>

08000b3e <LoopForever>:
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
 8000b40:	2000a000 	.word	0x2000a000
 8000b44:	20000000 	.word	0x20000000
 8000b48:	2000000c 	.word	0x2000000c
 8000b4c:	08004318 	.word	0x08004318
 8000b50:	2000000c 	.word	0x2000000c
 8000b54:	20000408 	.word	0x20000408

08000b58 <ADC1_2_IRQHandler>:
 8000b58:	e7fe      	b.n	8000b58 <ADC1_2_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <HAL_Init+0x28>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_Init+0x28>)
 8000b66:	f043 0310 	orr.w	r3, r3, #16
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 f92b 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f000 f808 	bl	8000b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b78:	f7ff fe6c 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40022000 	.word	0x40022000

08000b88 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_InitTick+0x54>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_InitTick+0x58>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f943 	bl	8000e32 <HAL_SYSTICK_Config>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00e      	b.n	8000bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d80a      	bhi.n	8000bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f000 f90b 	bl	8000dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <HAL_InitTick+0x5c>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e000      	b.n	8000bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000008 	.word	0x20000008
 8000be4:	20000004 	.word	0x20000004

08000be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x20>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_IncTick+0x24>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000404 	.word	0x20000404

08000c10 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_GetTick+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000404 	.word	0x20000404

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da8:	f7ff ff8e 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff29 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df0:	f7ff ff3e 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff ff8e 	bl	8000d1c <NVIC_EncodePriority>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff5d 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff31 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffa2 	bl	8000d84 <SysTick_Config>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d008      	beq.n	8000e6e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2204      	movs	r2, #4
 8000e60:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e020      	b.n	8000eb0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 020e 	bic.w	r2, r2, #14
 8000e7c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f022 0201 	bic.w	r2, r2, #1
 8000e8c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e96:	2101      	movs	r1, #1
 8000e98:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d005      	beq.n	8000ede <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e027      	b.n	8000f2e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 020e 	bic.w	r2, r2, #14
 8000eec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0201 	bic.w	r2, r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f06:	2101      	movs	r1, #1
 8000f08:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	4798      	blx	r3
    } 
  }
  return status;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f46:	e154      	b.n	80011f2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	4013      	ands	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f000 8146 	beq.w	80011ec <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d005      	beq.n	8000f78 <HAL_GPIO_Init+0x40>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d130      	bne.n	8000fda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fae:	2201      	movs	r2, #1
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	091b      	lsrs	r3, r3, #4
 8000fc4:	f003 0201 	and.w	r2, r3, #1
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	d017      	beq.n	8001016 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d123      	bne.n	800106a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	08da      	lsrs	r2, r3, #3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3208      	adds	r2, #8
 800102a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	220f      	movs	r2, #15
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	691a      	ldr	r2, [r3, #16]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	08da      	lsrs	r2, r3, #3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3208      	adds	r2, #8
 8001064:	6939      	ldr	r1, [r7, #16]
 8001066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0203 	and.w	r2, r3, #3
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 80a0 	beq.w	80011ec <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ac:	4b58      	ldr	r3, [pc, #352]	; (8001210 <HAL_GPIO_Init+0x2d8>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a57      	ldr	r2, [pc, #348]	; (8001210 <HAL_GPIO_Init+0x2d8>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b55      	ldr	r3, [pc, #340]	; (8001210 <HAL_GPIO_Init+0x2d8>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010c4:	4a53      	ldr	r2, [pc, #332]	; (8001214 <HAL_GPIO_Init+0x2dc>)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	3302      	adds	r3, #2
 80010cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	220f      	movs	r2, #15
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ee:	d019      	beq.n	8001124 <HAL_GPIO_Init+0x1ec>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a49      	ldr	r2, [pc, #292]	; (8001218 <HAL_GPIO_Init+0x2e0>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d013      	beq.n	8001120 <HAL_GPIO_Init+0x1e8>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a48      	ldr	r2, [pc, #288]	; (800121c <HAL_GPIO_Init+0x2e4>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d00d      	beq.n	800111c <HAL_GPIO_Init+0x1e4>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a47      	ldr	r2, [pc, #284]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d007      	beq.n	8001118 <HAL_GPIO_Init+0x1e0>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a46      	ldr	r2, [pc, #280]	; (8001224 <HAL_GPIO_Init+0x2ec>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d101      	bne.n	8001114 <HAL_GPIO_Init+0x1dc>
 8001110:	2304      	movs	r3, #4
 8001112:	e008      	b.n	8001126 <HAL_GPIO_Init+0x1ee>
 8001114:	2305      	movs	r3, #5
 8001116:	e006      	b.n	8001126 <HAL_GPIO_Init+0x1ee>
 8001118:	2303      	movs	r3, #3
 800111a:	e004      	b.n	8001126 <HAL_GPIO_Init+0x1ee>
 800111c:	2302      	movs	r3, #2
 800111e:	e002      	b.n	8001126 <HAL_GPIO_Init+0x1ee>
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <HAL_GPIO_Init+0x1ee>
 8001124:	2300      	movs	r3, #0
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	f002 0203 	and.w	r2, r2, #3
 800112c:	0092      	lsls	r2, r2, #2
 800112e:	4093      	lsls	r3, r2
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001136:	4937      	ldr	r1, [pc, #220]	; (8001214 <HAL_GPIO_Init+0x2dc>)
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	3302      	adds	r3, #2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001144:	4b38      	ldr	r3, [pc, #224]	; (8001228 <HAL_GPIO_Init+0x2f0>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	43db      	mvns	r3, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001168:	4a2f      	ldr	r2, [pc, #188]	; (8001228 <HAL_GPIO_Init+0x2f0>)
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <HAL_GPIO_Init+0x2f0>)
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001192:	4a25      	ldr	r2, [pc, #148]	; (8001228 <HAL_GPIO_Init+0x2f0>)
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <HAL_GPIO_Init+0x2f0>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011bc:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <HAL_GPIO_Init+0x2f0>)
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_GPIO_Init+0x2f0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011e6:	4a10      	ldr	r2, [pc, #64]	; (8001228 <HAL_GPIO_Init+0x2f0>)
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	3301      	adds	r3, #1
 80011f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	fa22 f303 	lsr.w	r3, r2, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f47f aea3 	bne.w	8000f48 <HAL_GPIO_Init+0x10>
  }
}
 8001202:	bf00      	nop
 8001204:	bf00      	nop
 8001206:	371c      	adds	r7, #28
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	40021000 	.word	0x40021000
 8001214:	40010000 	.word	0x40010000
 8001218:	48000400 	.word	0x48000400
 800121c:	48000800 	.word	0x48000800
 8001220:	48000c00 	.word	0x48000c00
 8001224:	48001000 	.word	0x48001000
 8001228:	40010400 	.word	0x40010400

0800122c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	807b      	strh	r3, [r7, #2]
 8001238:	4613      	mov	r3, r2
 800123a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800123c:	787b      	ldrb	r3, [r7, #1]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001248:	e002      	b.n	8001250 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125e:	b08b      	sub	sp, #44	; 0x2c
 8001260:	af06      	add	r7, sp, #24
 8001262:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e0c4      	b.n	80013f8 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d106      	bne.n	8001288 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff fbb6 	bl	80009f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2203      	movs	r2, #3
 800128c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f002 ffab 	bl	80041f0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800129a:	2300      	movs	r3, #0
 800129c:	73fb      	strb	r3, [r7, #15]
 800129e:	e040      	b.n	8001322 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	440b      	add	r3, r1
 80012b0:	3301      	adds	r3, #1
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	440b      	add	r3, r1
 80012c6:	7bfa      	ldrb	r2, [r7, #15]
 80012c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	440b      	add	r3, r1
 80012da:	3303      	adds	r3, #3
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	440b      	add	r3, r1
 80012ee:	3338      	adds	r3, #56	; 0x38
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012f4:	7bfa      	ldrb	r2, [r7, #15]
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	440b      	add	r3, r1
 8001302:	333c      	adds	r3, #60	; 0x3c
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	440b      	add	r3, r1
 8001316:	3340      	adds	r3, #64	; 0x40
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	3301      	adds	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	7bfa      	ldrb	r2, [r7, #15]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	d3b9      	bcc.n	80012a0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800132c:	2300      	movs	r3, #0
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	e044      	b.n	80013bc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	440b      	add	r3, r1
 8001340:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001348:	7bfa      	ldrb	r2, [r7, #15]
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	440b      	add	r3, r1
 8001356:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800135a:	7bfa      	ldrb	r2, [r7, #15]
 800135c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	440b      	add	r3, r1
 800136c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	440b      	add	r3, r1
 8001382:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800138a:	7bfa      	ldrb	r2, [r7, #15]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013a0:	7bfa      	ldrb	r2, [r7, #15]
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	440b      	add	r3, r1
 80013ae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	3301      	adds	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d3b5      	bcc.n	8001332 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	687e      	ldr	r6, [r7, #4]
 80013ce:	466d      	mov	r5, sp
 80013d0:	f106 0410 	add.w	r4, r6, #16
 80013d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d8:	6823      	ldr	r3, [r4, #0]
 80013da:	602b      	str	r3, [r5, #0]
 80013dc:	1d33      	adds	r3, r6, #4
 80013de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013e0:	6838      	ldr	r0, [r7, #0]
 80013e2:	f002 ff20 	bl	8004226 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001406:	af00      	add	r7, sp, #0
 8001408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001410:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001416:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	f001 b823 	b.w	800246c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 817d 	beq.w	8001736 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800143c:	4bbc      	ldr	r3, [pc, #752]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	2b04      	cmp	r3, #4
 8001446:	d00c      	beq.n	8001462 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001448:	4bb9      	ldr	r3, [pc, #740]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	2b08      	cmp	r3, #8
 8001452:	d15c      	bne.n	800150e <HAL_RCC_OscConfig+0x10e>
 8001454:	4bb6      	ldr	r3, [pc, #728]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001460:	d155      	bne.n	800150e <HAL_RCC_OscConfig+0x10e>
 8001462:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001466:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800146e:	fa93 f3a3 	rbit	r3, r3
 8001472:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001476:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147a:	fab3 f383 	clz	r3, r3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	095b      	lsrs	r3, r3, #5
 8001482:	b2db      	uxtb	r3, r3
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b01      	cmp	r3, #1
 800148c:	d102      	bne.n	8001494 <HAL_RCC_OscConfig+0x94>
 800148e:	4ba8      	ldr	r3, [pc, #672]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	e015      	b.n	80014c0 <HAL_RCC_OscConfig+0xc0>
 8001494:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001498:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80014a0:	fa93 f3a3 	rbit	r3, r3
 80014a4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80014a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80014b0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80014b4:	fa93 f3a3 	rbit	r3, r3
 80014b8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80014bc:	4b9c      	ldr	r3, [pc, #624]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014c4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80014c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80014cc:	fa92 f2a2 	rbit	r2, r2
 80014d0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80014d4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80014d8:	fab2 f282 	clz	r2, r2
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	f042 0220 	orr.w	r2, r2, #32
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	f002 021f 	and.w	r2, r2, #31
 80014e8:	2101      	movs	r1, #1
 80014ea:	fa01 f202 	lsl.w	r2, r1, r2
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 811f 	beq.w	8001734 <HAL_RCC_OscConfig+0x334>
 80014f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	f040 8116 	bne.w	8001734 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	f000 bfaf 	b.w	800246c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001512:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151e:	d106      	bne.n	800152e <HAL_RCC_OscConfig+0x12e>
 8001520:	4b83      	ldr	r3, [pc, #524]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a82      	ldr	r2, [pc, #520]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 8001526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	e036      	b.n	800159c <HAL_RCC_OscConfig+0x19c>
 800152e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001532:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0x158>
 800153e:	4b7c      	ldr	r3, [pc, #496]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a7b      	ldr	r2, [pc, #492]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 8001544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b79      	ldr	r3, [pc, #484]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a78      	ldr	r2, [pc, #480]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 8001550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e021      	b.n	800159c <HAL_RCC_OscConfig+0x19c>
 8001558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x184>
 800156a:	4b71      	ldr	r3, [pc, #452]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a70      	ldr	r2, [pc, #448]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 8001570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b6e      	ldr	r3, [pc, #440]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a6d      	ldr	r2, [pc, #436]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 800157c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e00b      	b.n	800159c <HAL_RCC_OscConfig+0x19c>
 8001584:	4b6a      	ldr	r3, [pc, #424]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a69      	ldr	r2, [pc, #420]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 800158a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b67      	ldr	r3, [pc, #412]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a66      	ldr	r2, [pc, #408]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 8001596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800159c:	4b64      	ldr	r3, [pc, #400]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	f023 020f 	bic.w	r2, r3, #15
 80015a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	495f      	ldr	r1, [pc, #380]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d059      	beq.n	800167a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fb23 	bl	8000c10 <HAL_GetTick>
 80015ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ce:	e00a      	b.n	80015e6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d0:	f7ff fb1e 	bl	8000c10 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b64      	cmp	r3, #100	; 0x64
 80015de:	d902      	bls.n	80015e6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	f000 bf43 	b.w	800246c <HAL_RCC_OscConfig+0x106c>
 80015e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80015f2:	fa93 f3a3 	rbit	r3, r3
 80015f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80015fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	fab3 f383 	clz	r3, r3
 8001602:	b2db      	uxtb	r3, r3
 8001604:	095b      	lsrs	r3, r3, #5
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b01      	cmp	r3, #1
 8001610:	d102      	bne.n	8001618 <HAL_RCC_OscConfig+0x218>
 8001612:	4b47      	ldr	r3, [pc, #284]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	e015      	b.n	8001644 <HAL_RCC_OscConfig+0x244>
 8001618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800161c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001620:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001624:	fa93 f3a3 	rbit	r3, r3
 8001628:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800162c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001630:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001634:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001638:	fa93 f3a3 	rbit	r3, r3
 800163c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001640:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001648:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800164c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001650:	fa92 f2a2 	rbit	r2, r2
 8001654:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001658:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800165c:	fab2 f282 	clz	r2, r2
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	f042 0220 	orr.w	r2, r2, #32
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	f002 021f 	and.w	r2, r2, #31
 800166c:	2101      	movs	r1, #1
 800166e:	fa01 f202 	lsl.w	r2, r1, r2
 8001672:	4013      	ands	r3, r2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0ab      	beq.n	80015d0 <HAL_RCC_OscConfig+0x1d0>
 8001678:	e05d      	b.n	8001736 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7ff fac9 	bl	8000c10 <HAL_GetTick>
 800167e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001682:	e00a      	b.n	800169a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fac4 	bl	8000c10 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b64      	cmp	r3, #100	; 0x64
 8001692:	d902      	bls.n	800169a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	f000 bee9 	b.w	800246c <HAL_RCC_OscConfig+0x106c>
 800169a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800169e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80016a6:	fa93 f3a3 	rbit	r3, r3
 80016aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80016ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b2:	fab3 f383 	clz	r3, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	095b      	lsrs	r3, r3, #5
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d102      	bne.n	80016cc <HAL_RCC_OscConfig+0x2cc>
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	e015      	b.n	80016f8 <HAL_RCC_OscConfig+0x2f8>
 80016cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80016e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80016e8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <HAL_RCC_OscConfig+0x330>)
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016fc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001700:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001704:	fa92 f2a2 	rbit	r2, r2
 8001708:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800170c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001710:	fab2 f282 	clz	r2, r2
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	f042 0220 	orr.w	r2, r2, #32
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	f002 021f 	and.w	r2, r2, #31
 8001720:	2101      	movs	r1, #1
 8001722:	fa01 f202 	lsl.w	r2, r1, r2
 8001726:	4013      	ands	r3, r2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1ab      	bne.n	8001684 <HAL_RCC_OscConfig+0x284>
 800172c:	e003      	b.n	8001736 <HAL_RCC_OscConfig+0x336>
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 817d 	beq.w	8001a46 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800174c:	4ba6      	ldr	r3, [pc, #664]	; (80019e8 <HAL_RCC_OscConfig+0x5e8>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 030c 	and.w	r3, r3, #12
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00b      	beq.n	8001770 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001758:	4ba3      	ldr	r3, [pc, #652]	; (80019e8 <HAL_RCC_OscConfig+0x5e8>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	2b08      	cmp	r3, #8
 8001762:	d172      	bne.n	800184a <HAL_RCC_OscConfig+0x44a>
 8001764:	4ba0      	ldr	r3, [pc, #640]	; (80019e8 <HAL_RCC_OscConfig+0x5e8>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d16c      	bne.n	800184a <HAL_RCC_OscConfig+0x44a>
 8001770:	2302      	movs	r3, #2
 8001772:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001776:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800177a:	fa93 f3a3 	rbit	r3, r3
 800177e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001782:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001786:	fab3 f383 	clz	r3, r3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	095b      	lsrs	r3, r3, #5
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b01      	cmp	r3, #1
 8001798:	d102      	bne.n	80017a0 <HAL_RCC_OscConfig+0x3a0>
 800179a:	4b93      	ldr	r3, [pc, #588]	; (80019e8 <HAL_RCC_OscConfig+0x5e8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	e013      	b.n	80017c8 <HAL_RCC_OscConfig+0x3c8>
 80017a0:	2302      	movs	r3, #2
 80017a2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80017b2:	2302      	movs	r3, #2
 80017b4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80017b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80017bc:	fa93 f3a3 	rbit	r3, r3
 80017c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80017c4:	4b88      	ldr	r3, [pc, #544]	; (80019e8 <HAL_RCC_OscConfig+0x5e8>)
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	2202      	movs	r2, #2
 80017ca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80017ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80017d2:	fa92 f2a2 	rbit	r2, r2
 80017d6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80017da:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80017de:	fab2 f282 	clz	r2, r2
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	f042 0220 	orr.w	r2, r2, #32
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	f002 021f 	and.w	r2, r2, #31
 80017ee:	2101      	movs	r1, #1
 80017f0:	fa01 f202 	lsl.w	r2, r1, r2
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00a      	beq.n	8001810 <HAL_RCC_OscConfig+0x410>
 80017fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d002      	beq.n	8001810 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	f000 be2e 	b.w	800246c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001810:	4b75      	ldr	r3, [pc, #468]	; (80019e8 <HAL_RCC_OscConfig+0x5e8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	21f8      	movs	r1, #248	; 0xf8
 8001826:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800182e:	fa91 f1a1 	rbit	r1, r1
 8001832:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001836:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800183a:	fab1 f181 	clz	r1, r1
 800183e:	b2c9      	uxtb	r1, r1
 8001840:	408b      	lsls	r3, r1
 8001842:	4969      	ldr	r1, [pc, #420]	; (80019e8 <HAL_RCC_OscConfig+0x5e8>)
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001848:	e0fd      	b.n	8001a46 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800184a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 8088 	beq.w	800196c <HAL_RCC_OscConfig+0x56c>
 800185c:	2301      	movs	r3, #1
 800185e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001866:	fa93 f3a3 	rbit	r3, r3
 800186a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800186e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001872:	fab3 f383 	clz	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800187c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	461a      	mov	r2, r3
 8001884:	2301      	movs	r3, #1
 8001886:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7ff f9c2 	bl	8000c10 <HAL_GetTick>
 800188c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001890:	e00a      	b.n	80018a8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001892:	f7ff f9bd 	bl	8000c10 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d902      	bls.n	80018a8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	f000 bde2 	b.w	800246c <HAL_RCC_OscConfig+0x106c>
 80018a8:	2302      	movs	r3, #2
 80018aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80018b2:	fa93 f3a3 	rbit	r3, r3
 80018b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80018ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018be:	fab3 f383 	clz	r3, r3
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	095b      	lsrs	r3, r3, #5
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d102      	bne.n	80018d8 <HAL_RCC_OscConfig+0x4d8>
 80018d2:	4b45      	ldr	r3, [pc, #276]	; (80019e8 <HAL_RCC_OscConfig+0x5e8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	e013      	b.n	8001900 <HAL_RCC_OscConfig+0x500>
 80018d8:	2302      	movs	r3, #2
 80018da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80018e2:	fa93 f3a3 	rbit	r3, r3
 80018e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80018ea:	2302      	movs	r3, #2
 80018ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80018f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80018fc:	4b3a      	ldr	r3, [pc, #232]	; (80019e8 <HAL_RCC_OscConfig+0x5e8>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	2202      	movs	r2, #2
 8001902:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001906:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800190a:	fa92 f2a2 	rbit	r2, r2
 800190e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001912:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001916:	fab2 f282 	clz	r2, r2
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	f042 0220 	orr.w	r2, r2, #32
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	f002 021f 	and.w	r2, r2, #31
 8001926:	2101      	movs	r1, #1
 8001928:	fa01 f202 	lsl.w	r2, r1, r2
 800192c:	4013      	ands	r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0af      	beq.n	8001892 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001932:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <HAL_RCC_OscConfig+0x5e8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	21f8      	movs	r1, #248	; 0xf8
 8001948:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001950:	fa91 f1a1 	rbit	r1, r1
 8001954:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001958:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800195c:	fab1 f181 	clz	r1, r1
 8001960:	b2c9      	uxtb	r1, r1
 8001962:	408b      	lsls	r3, r1
 8001964:	4920      	ldr	r1, [pc, #128]	; (80019e8 <HAL_RCC_OscConfig+0x5e8>)
 8001966:	4313      	orrs	r3, r2
 8001968:	600b      	str	r3, [r1, #0]
 800196a:	e06c      	b.n	8001a46 <HAL_RCC_OscConfig+0x646>
 800196c:	2301      	movs	r3, #1
 800196e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800197e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001982:	fab3 f383 	clz	r3, r3
 8001986:	b2db      	uxtb	r3, r3
 8001988:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800198c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	461a      	mov	r2, r3
 8001994:	2300      	movs	r3, #0
 8001996:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff f93a 	bl	8000c10 <HAL_GetTick>
 800199c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a0:	e00a      	b.n	80019b8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a2:	f7ff f935 	bl	8000c10 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d902      	bls.n	80019b8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	f000 bd5a 	b.w	800246c <HAL_RCC_OscConfig+0x106c>
 80019b8:	2302      	movs	r3, #2
 80019ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80019c2:	fa93 f3a3 	rbit	r3, r3
 80019c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80019ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ce:	fab3 f383 	clz	r3, r3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	095b      	lsrs	r3, r3, #5
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d104      	bne.n	80019ec <HAL_RCC_OscConfig+0x5ec>
 80019e2:	4b01      	ldr	r3, [pc, #4]	; (80019e8 <HAL_RCC_OscConfig+0x5e8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	e015      	b.n	8001a14 <HAL_RCC_OscConfig+0x614>
 80019e8:	40021000 	.word	0x40021000
 80019ec:	2302      	movs	r3, #2
 80019ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019f6:	fa93 f3a3 	rbit	r3, r3
 80019fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80019fe:	2302      	movs	r3, #2
 8001a00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a08:	fa93 f3a3 	rbit	r3, r3
 8001a0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001a10:	4bc8      	ldr	r3, [pc, #800]	; (8001d34 <HAL_RCC_OscConfig+0x934>)
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	2202      	movs	r2, #2
 8001a16:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001a1a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a1e:	fa92 f2a2 	rbit	r2, r2
 8001a22:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001a26:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a2a:	fab2 f282 	clz	r2, r2
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	f042 0220 	orr.w	r2, r2, #32
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	f002 021f 	and.w	r2, r2, #31
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1ad      	bne.n	80019a2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 8110 	beq.w	8001c7c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d079      	beq.n	8001b60 <HAL_RCC_OscConfig+0x760>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a76:	fa93 f3a3 	rbit	r3, r3
 8001a7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4bab      	ldr	r3, [pc, #684]	; (8001d38 <HAL_RCC_OscConfig+0x938>)
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	461a      	mov	r2, r3
 8001a92:	2301      	movs	r3, #1
 8001a94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a96:	f7ff f8bb 	bl	8000c10 <HAL_GetTick>
 8001a9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa0:	f7ff f8b6 	bl	8000c10 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d902      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	f000 bcdb 	b.w	800246c <HAL_RCC_OscConfig+0x106c>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ac0:	fa93 f3a3 	rbit	r3, r3
 8001ac4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001acc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	fa93 f2a3 	rbit	r2, r3
 8001ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001af4:	2202      	movs	r2, #2
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	fa93 f2a3 	rbit	r2, r3
 8001b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b0e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b10:	4b88      	ldr	r3, [pc, #544]	; (8001d34 <HAL_RCC_OscConfig+0x934>)
 8001b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b1c:	2102      	movs	r1, #2
 8001b1e:	6019      	str	r1, [r3, #0]
 8001b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b24:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	fa93 f1a3 	rbit	r1, r3
 8001b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b32:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b36:	6019      	str	r1, [r3, #0]
  return result;
 8001b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	2101      	movs	r1, #1
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0a0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x6a0>
 8001b5e:	e08d      	b.n	8001c7c <HAL_RCC_OscConfig+0x87c>
 8001b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b64:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b68:	2201      	movs	r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b70:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	fa93 f2a3 	rbit	r2, r3
 8001b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b82:	601a      	str	r2, [r3, #0]
  return result;
 8001b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b88:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b8c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	4b68      	ldr	r3, [pc, #416]	; (8001d38 <HAL_RCC_OscConfig+0x938>)
 8001b98:	4413      	add	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba2:	f7ff f835 	bl	8000c10 <HAL_GetTick>
 8001ba6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff f830 	bl	8000c10 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d902      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	f000 bc55 	b.w	800246c <HAL_RCC_OscConfig+0x106c>
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001bca:	2202      	movs	r2, #2
 8001bcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	fa93 f2a3 	rbit	r2, r3
 8001bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001bee:	2202      	movs	r2, #2
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	fa93 f2a3 	rbit	r2, r3
 8001c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c12:	2202      	movs	r2, #2
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	fa93 f2a3 	rbit	r2, r3
 8001c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c28:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2e:	4b41      	ldr	r3, [pc, #260]	; (8001d34 <HAL_RCC_OscConfig+0x934>)
 8001c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c36:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c3a:	2102      	movs	r1, #2
 8001c3c:	6019      	str	r1, [r3, #0]
 8001c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c42:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	fa93 f1a3 	rbit	r1, r3
 8001c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c50:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c54:	6019      	str	r1, [r3, #0]
  return result;
 8001c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	f003 031f 	and.w	r3, r3, #31
 8001c70:	2101      	movs	r1, #1
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d197      	bne.n	8001bac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 81a1 	beq.w	8001fd4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c98:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <HAL_RCC_OscConfig+0x934>)
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d116      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca4:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <HAL_RCC_OscConfig+0x934>)
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	4a22      	ldr	r2, [pc, #136]	; (8001d34 <HAL_RCC_OscConfig+0x934>)
 8001caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cae:	61d3      	str	r3, [r2, #28]
 8001cb0:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_RCC_OscConfig+0x934>)
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001cca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <HAL_RCC_OscConfig+0x93c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d11a      	bne.n	8001d14 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_RCC_OscConfig+0x93c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a16      	ldr	r2, [pc, #88]	; (8001d3c <HAL_RCC_OscConfig+0x93c>)
 8001ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cea:	f7fe ff91 	bl	8000c10 <HAL_GetTick>
 8001cee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf2:	e009      	b.n	8001d08 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf4:	f7fe ff8c 	bl	8000c10 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b64      	cmp	r3, #100	; 0x64
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e3b1      	b.n	800246c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_RCC_OscConfig+0x93c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0ef      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d10d      	bne.n	8001d40 <HAL_RCC_OscConfig+0x940>
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <HAL_RCC_OscConfig+0x934>)
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	4a02      	ldr	r2, [pc, #8]	; (8001d34 <HAL_RCC_OscConfig+0x934>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6213      	str	r3, [r2, #32]
 8001d30:	e03c      	b.n	8001dac <HAL_RCC_OscConfig+0x9ac>
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	10908120 	.word	0x10908120
 8001d3c:	40007000 	.word	0x40007000
 8001d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10c      	bne.n	8001d6a <HAL_RCC_OscConfig+0x96a>
 8001d50:	4bc1      	ldr	r3, [pc, #772]	; (8002058 <HAL_RCC_OscConfig+0xc58>)
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	4ac0      	ldr	r2, [pc, #768]	; (8002058 <HAL_RCC_OscConfig+0xc58>)
 8001d56:	f023 0301 	bic.w	r3, r3, #1
 8001d5a:	6213      	str	r3, [r2, #32]
 8001d5c:	4bbe      	ldr	r3, [pc, #760]	; (8002058 <HAL_RCC_OscConfig+0xc58>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4abd      	ldr	r2, [pc, #756]	; (8002058 <HAL_RCC_OscConfig+0xc58>)
 8001d62:	f023 0304 	bic.w	r3, r3, #4
 8001d66:	6213      	str	r3, [r2, #32]
 8001d68:	e020      	b.n	8001dac <HAL_RCC_OscConfig+0x9ac>
 8001d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b05      	cmp	r3, #5
 8001d78:	d10c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x994>
 8001d7a:	4bb7      	ldr	r3, [pc, #732]	; (8002058 <HAL_RCC_OscConfig+0xc58>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	4ab6      	ldr	r2, [pc, #728]	; (8002058 <HAL_RCC_OscConfig+0xc58>)
 8001d80:	f043 0304 	orr.w	r3, r3, #4
 8001d84:	6213      	str	r3, [r2, #32]
 8001d86:	4bb4      	ldr	r3, [pc, #720]	; (8002058 <HAL_RCC_OscConfig+0xc58>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4ab3      	ldr	r2, [pc, #716]	; (8002058 <HAL_RCC_OscConfig+0xc58>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6213      	str	r3, [r2, #32]
 8001d92:	e00b      	b.n	8001dac <HAL_RCC_OscConfig+0x9ac>
 8001d94:	4bb0      	ldr	r3, [pc, #704]	; (8002058 <HAL_RCC_OscConfig+0xc58>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4aaf      	ldr	r2, [pc, #700]	; (8002058 <HAL_RCC_OscConfig+0xc58>)
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	6213      	str	r3, [r2, #32]
 8001da0:	4bad      	ldr	r3, [pc, #692]	; (8002058 <HAL_RCC_OscConfig+0xc58>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4aac      	ldr	r2, [pc, #688]	; (8002058 <HAL_RCC_OscConfig+0xc58>)
 8001da6:	f023 0304 	bic.w	r3, r3, #4
 8001daa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 8081 	beq.w	8001ec0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbe:	f7fe ff27 	bl	8000c10 <HAL_GetTick>
 8001dc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc6:	e00b      	b.n	8001de0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc8:	f7fe ff22 	bl	8000c10 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e345      	b.n	800246c <HAL_RCC_OscConfig+0x106c>
 8001de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001de8:	2202      	movs	r2, #2
 8001dea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	fa93 f2a3 	rbit	r2, r3
 8001dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e08:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	fa93 f2a3 	rbit	r2, r3
 8001e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e22:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e26:	601a      	str	r2, [r3, #0]
  return result;
 8001e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e32:	fab3 f383 	clz	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	095b      	lsrs	r3, r3, #5
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d102      	bne.n	8001e4c <HAL_RCC_OscConfig+0xa4c>
 8001e46:	4b84      	ldr	r3, [pc, #528]	; (8002058 <HAL_RCC_OscConfig+0xc58>)
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	e013      	b.n	8001e74 <HAL_RCC_OscConfig+0xa74>
 8001e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e50:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e54:	2202      	movs	r2, #2
 8001e56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	fa93 f2a3 	rbit	r2, r3
 8001e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	4b79      	ldr	r3, [pc, #484]	; (8002058 <HAL_RCC_OscConfig+0xc58>)
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e78:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	6011      	str	r1, [r2, #0]
 8001e80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e84:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	fa92 f1a2 	rbit	r1, r2
 8001e8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e92:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e96:	6011      	str	r1, [r2, #0]
  return result;
 8001e98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e9c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	fab2 f282 	clz	r2, r2
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	f002 021f 	and.w	r2, r2, #31
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d084      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x9c8>
 8001ebe:	e07f      	b.n	8001fc0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec0:	f7fe fea6 	bl	8000c10 <HAL_GetTick>
 8001ec4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec8:	e00b      	b.n	8001ee2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eca:	f7fe fea1 	bl	8000c10 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e2c4      	b.n	800246c <HAL_RCC_OscConfig+0x106c>
 8001ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001eea:	2202      	movs	r2, #2
 8001eec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	fa93 f2a3 	rbit	r2, r3
 8001efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f00:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f0e:	2202      	movs	r2, #2
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	fa93 f2a3 	rbit	r2, r3
 8001f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f24:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f28:	601a      	str	r2, [r3, #0]
  return result;
 8001f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f34:	fab3 f383 	clz	r3, r3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	f043 0302 	orr.w	r3, r3, #2
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d102      	bne.n	8001f4e <HAL_RCC_OscConfig+0xb4e>
 8001f48:	4b43      	ldr	r3, [pc, #268]	; (8002058 <HAL_RCC_OscConfig+0xc58>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	e013      	b.n	8001f76 <HAL_RCC_OscConfig+0xb76>
 8001f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f52:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f56:	2202      	movs	r2, #2
 8001f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	fa93 f2a3 	rbit	r2, r3
 8001f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	4b39      	ldr	r3, [pc, #228]	; (8002058 <HAL_RCC_OscConfig+0xc58>)
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f7a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001f7e:	2102      	movs	r1, #2
 8001f80:	6011      	str	r1, [r2, #0]
 8001f82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f86:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	fa92 f1a2 	rbit	r1, r2
 8001f90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f94:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f98:	6011      	str	r1, [r2, #0]
  return result;
 8001f9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f9e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	fab2 f282 	clz	r2, r2
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	f002 021f 	and.w	r2, r2, #31
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d184      	bne.n	8001eca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fc0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc8:	4b23      	ldr	r3, [pc, #140]	; (8002058 <HAL_RCC_OscConfig+0xc58>)
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	4a22      	ldr	r2, [pc, #136]	; (8002058 <HAL_RCC_OscConfig+0xc58>)
 8001fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 8242 	beq.w	800246a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <HAL_RCC_OscConfig+0xc58>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	f000 8213 	beq.w	800241a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	2b02      	cmp	r3, #2
 8002002:	f040 8162 	bne.w	80022ca <HAL_RCC_OscConfig+0xeca>
 8002006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800200e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002012:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002018:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	fa93 f2a3 	rbit	r2, r3
 8002022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002026:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800202a:	601a      	str	r2, [r3, #0]
  return result;
 800202c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002030:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002034:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002040:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	461a      	mov	r2, r3
 8002048:	2300      	movs	r3, #0
 800204a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7fe fde0 	bl	8000c10 <HAL_GetTick>
 8002050:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002054:	e00c      	b.n	8002070 <HAL_RCC_OscConfig+0xc70>
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205c:	f7fe fdd8 	bl	8000c10 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e1fd      	b.n	800246c <HAL_RCC_OscConfig+0x106c>
 8002070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002074:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002078:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800207c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002082:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	fa93 f2a3 	rbit	r2, r3
 800208c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002090:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002094:	601a      	str	r2, [r3, #0]
  return result;
 8002096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800209e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a0:	fab3 f383 	clz	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d102      	bne.n	80020ba <HAL_RCC_OscConfig+0xcba>
 80020b4:	4bb0      	ldr	r3, [pc, #704]	; (8002378 <HAL_RCC_OscConfig+0xf78>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	e027      	b.n	800210a <HAL_RCC_OscConfig+0xd0a>
 80020ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020be:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80020c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020cc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	fa93 f2a3 	rbit	r2, r3
 80020d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020da:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80020e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	fa93 f2a3 	rbit	r2, r3
 80020fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002100:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	4b9c      	ldr	r3, [pc, #624]	; (8002378 <HAL_RCC_OscConfig+0xf78>)
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800210e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002112:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002116:	6011      	str	r1, [r2, #0]
 8002118:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800211c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	fa92 f1a2 	rbit	r1, r2
 8002126:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800212a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800212e:	6011      	str	r1, [r2, #0]
  return result;
 8002130:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002134:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	fab2 f282 	clz	r2, r2
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	f042 0220 	orr.w	r2, r2, #32
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	f002 021f 	and.w	r2, r2, #31
 800214a:	2101      	movs	r1, #1
 800214c:	fa01 f202 	lsl.w	r2, r1, r2
 8002150:	4013      	ands	r3, r2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d182      	bne.n	800205c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002156:	4b88      	ldr	r3, [pc, #544]	; (8002378 <HAL_RCC_OscConfig+0xf78>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800215e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002162:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800216a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	430b      	orrs	r3, r1
 8002178:	497f      	ldr	r1, [pc, #508]	; (8002378 <HAL_RCC_OscConfig+0xf78>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
 800217e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002182:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002186:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800218a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002190:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	fa93 f2a3 	rbit	r2, r3
 800219a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80021a2:	601a      	str	r2, [r3, #0]
  return result;
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80021ac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	461a      	mov	r2, r3
 80021c0:	2301      	movs	r3, #1
 80021c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7fe fd24 	bl	8000c10 <HAL_GetTick>
 80021c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021cc:	e009      	b.n	80021e2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ce:	f7fe fd1f 	bl	8000c10 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e144      	b.n	800246c <HAL_RCC_OscConfig+0x106c>
 80021e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80021ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	fa93 f2a3 	rbit	r2, r3
 80021fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002202:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002206:	601a      	str	r2, [r3, #0]
  return result;
 8002208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002210:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	095b      	lsrs	r3, r3, #5
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d102      	bne.n	800222c <HAL_RCC_OscConfig+0xe2c>
 8002226:	4b54      	ldr	r3, [pc, #336]	; (8002378 <HAL_RCC_OscConfig+0xf78>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	e027      	b.n	800227c <HAL_RCC_OscConfig+0xe7c>
 800222c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002230:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002234:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002238:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	fa93 f2a3 	rbit	r2, r3
 8002248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002256:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800225a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002264:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	fa93 f2a3 	rbit	r2, r3
 800226e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002272:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	4b3f      	ldr	r3, [pc, #252]	; (8002378 <HAL_RCC_OscConfig+0xf78>)
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002280:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002284:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002288:	6011      	str	r1, [r2, #0]
 800228a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800228e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	fa92 f1a2 	rbit	r1, r2
 8002298:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800229c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80022a0:	6011      	str	r1, [r2, #0]
  return result;
 80022a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022a6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	fab2 f282 	clz	r2, r2
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	f042 0220 	orr.w	r2, r2, #32
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	f002 021f 	and.w	r2, r2, #31
 80022bc:	2101      	movs	r1, #1
 80022be:	fa01 f202 	lsl.w	r2, r1, r2
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d082      	beq.n	80021ce <HAL_RCC_OscConfig+0xdce>
 80022c8:	e0cf      	b.n	800246a <HAL_RCC_OscConfig+0x106a>
 80022ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ce:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80022d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022dc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	fa93 f2a3 	rbit	r2, r3
 80022e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80022ee:	601a      	str	r2, [r3, #0]
  return result;
 80022f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80022f8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002304:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	461a      	mov	r2, r3
 800230c:	2300      	movs	r3, #0
 800230e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7fe fc7e 	bl	8000c10 <HAL_GetTick>
 8002314:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002318:	e009      	b.n	800232e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231a:	f7fe fc79 	bl	8000c10 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e09e      	b.n	800246c <HAL_RCC_OscConfig+0x106c>
 800232e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002332:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002336:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800233a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002340:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	fa93 f2a3 	rbit	r2, r3
 800234a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002352:	601a      	str	r2, [r3, #0]
  return result;
 8002354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002358:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800235c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b01      	cmp	r3, #1
 8002370:	d104      	bne.n	800237c <HAL_RCC_OscConfig+0xf7c>
 8002372:	4b01      	ldr	r3, [pc, #4]	; (8002378 <HAL_RCC_OscConfig+0xf78>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	e029      	b.n	80023cc <HAL_RCC_OscConfig+0xfcc>
 8002378:	40021000 	.word	0x40021000
 800237c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002380:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002384:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002388:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	fa93 f2a3 	rbit	r2, r3
 8002398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80023aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	fa93 f2a3 	rbit	r2, r3
 80023be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <HAL_RCC_OscConfig+0x1078>)
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023d0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80023d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023d8:	6011      	str	r1, [r2, #0]
 80023da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023de:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	fa92 f1a2 	rbit	r1, r2
 80023e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80023f0:	6011      	str	r1, [r2, #0]
  return result;
 80023f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023f6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	fab2 f282 	clz	r2, r2
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	f042 0220 	orr.w	r2, r2, #32
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	f002 021f 	and.w	r2, r2, #31
 800240c:	2101      	movs	r1, #1
 800240e:	fa01 f202 	lsl.w	r2, r1, r2
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d180      	bne.n	800231a <HAL_RCC_OscConfig+0xf1a>
 8002418:	e027      	b.n	800246a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800241a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e01e      	b.n	800246c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_RCC_OscConfig+0x1078>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002436:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800243a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800243e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002442:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	429a      	cmp	r2, r3
 800244c:	d10b      	bne.n	8002466 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800244e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002452:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002462:	429a      	cmp	r2, r3
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000

0800247c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b09e      	sub	sp, #120	; 0x78
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e162      	b.n	800275a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002494:	4b90      	ldr	r3, [pc, #576]	; (80026d8 <HAL_RCC_ClockConfig+0x25c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d910      	bls.n	80024c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b8d      	ldr	r3, [pc, #564]	; (80026d8 <HAL_RCC_ClockConfig+0x25c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 0207 	bic.w	r2, r3, #7
 80024aa:	498b      	ldr	r1, [pc, #556]	; (80026d8 <HAL_RCC_ClockConfig+0x25c>)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	4b89      	ldr	r3, [pc, #548]	; (80026d8 <HAL_RCC_ClockConfig+0x25c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e14a      	b.n	800275a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d0:	4b82      	ldr	r3, [pc, #520]	; (80026dc <HAL_RCC_ClockConfig+0x260>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	497f      	ldr	r1, [pc, #508]	; (80026dc <HAL_RCC_ClockConfig+0x260>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80dc 	beq.w	80026a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d13c      	bne.n	8002572 <HAL_RCC_ClockConfig+0xf6>
 80024f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002500:	fa93 f3a3 	rbit	r3, r3
 8002504:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002508:	fab3 f383 	clz	r3, r3
 800250c:	b2db      	uxtb	r3, r3
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b01      	cmp	r3, #1
 800251a:	d102      	bne.n	8002522 <HAL_RCC_ClockConfig+0xa6>
 800251c:	4b6f      	ldr	r3, [pc, #444]	; (80026dc <HAL_RCC_ClockConfig+0x260>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	e00f      	b.n	8002542 <HAL_RCC_ClockConfig+0xc6>
 8002522:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002526:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	667b      	str	r3, [r7, #100]	; 0x64
 8002530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002534:	663b      	str	r3, [r7, #96]	; 0x60
 8002536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800253e:	4b67      	ldr	r3, [pc, #412]	; (80026dc <HAL_RCC_ClockConfig+0x260>)
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002546:	65ba      	str	r2, [r7, #88]	; 0x58
 8002548:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800254a:	fa92 f2a2 	rbit	r2, r2
 800254e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002550:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002552:	fab2 f282 	clz	r2, r2
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	f042 0220 	orr.w	r2, r2, #32
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	f002 021f 	and.w	r2, r2, #31
 8002562:	2101      	movs	r1, #1
 8002564:	fa01 f202 	lsl.w	r2, r1, r2
 8002568:	4013      	ands	r3, r2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d17b      	bne.n	8002666 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e0f3      	b.n	800275a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d13c      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x178>
 800257a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800257e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b01      	cmp	r3, #1
 800259c:	d102      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x128>
 800259e:	4b4f      	ldr	r3, [pc, #316]	; (80026dc <HAL_RCC_ClockConfig+0x260>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	e00f      	b.n	80025c4 <HAL_RCC_ClockConfig+0x148>
 80025a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	647b      	str	r3, [r7, #68]	; 0x44
 80025b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025b6:	643b      	str	r3, [r7, #64]	; 0x40
 80025b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c0:	4b46      	ldr	r3, [pc, #280]	; (80026dc <HAL_RCC_ClockConfig+0x260>)
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80025ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025cc:	fa92 f2a2 	rbit	r2, r2
 80025d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80025d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025d4:	fab2 f282 	clz	r2, r2
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	f042 0220 	orr.w	r2, r2, #32
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	f002 021f 	and.w	r2, r2, #31
 80025e4:	2101      	movs	r1, #1
 80025e6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d13a      	bne.n	8002666 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0b2      	b.n	800275a <HAL_RCC_ClockConfig+0x2de>
 80025f4:	2302      	movs	r3, #2
 80025f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	095b      	lsrs	r3, r3, #5
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b01      	cmp	r3, #1
 8002614:	d102      	bne.n	800261c <HAL_RCC_ClockConfig+0x1a0>
 8002616:	4b31      	ldr	r3, [pc, #196]	; (80026dc <HAL_RCC_ClockConfig+0x260>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	e00d      	b.n	8002638 <HAL_RCC_ClockConfig+0x1bc>
 800261c:	2302      	movs	r3, #2
 800261e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
 8002628:	2302      	movs	r3, #2
 800262a:	623b      	str	r3, [r7, #32]
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	4b29      	ldr	r3, [pc, #164]	; (80026dc <HAL_RCC_ClockConfig+0x260>)
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	2202      	movs	r2, #2
 800263a:	61ba      	str	r2, [r7, #24]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	fa92 f2a2 	rbit	r2, r2
 8002642:	617a      	str	r2, [r7, #20]
  return result;
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	fab2 f282 	clz	r2, r2
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	f042 0220 	orr.w	r2, r2, #32
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	f002 021f 	and.w	r2, r2, #31
 8002656:	2101      	movs	r1, #1
 8002658:	fa01 f202 	lsl.w	r2, r1, r2
 800265c:	4013      	ands	r3, r2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e079      	b.n	800275a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002666:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <HAL_RCC_ClockConfig+0x260>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f023 0203 	bic.w	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	491a      	ldr	r1, [pc, #104]	; (80026dc <HAL_RCC_ClockConfig+0x260>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002678:	f7fe faca 	bl	8000c10 <HAL_GetTick>
 800267c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267e:	e00a      	b.n	8002696 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002680:	f7fe fac6 	bl	8000c10 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	f241 3288 	movw	r2, #5000	; 0x1388
 800268e:	4293      	cmp	r3, r2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e061      	b.n	800275a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002696:	4b11      	ldr	r3, [pc, #68]	; (80026dc <HAL_RCC_ClockConfig+0x260>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 020c 	and.w	r2, r3, #12
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d1eb      	bne.n	8002680 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_ClockConfig+0x25c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d214      	bcs.n	80026e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <HAL_RCC_ClockConfig+0x25c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 0207 	bic.w	r2, r3, #7
 80026be:	4906      	ldr	r1, [pc, #24]	; (80026d8 <HAL_RCC_ClockConfig+0x25c>)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c6:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <HAL_RCC_ClockConfig+0x25c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e040      	b.n	800275a <HAL_RCC_ClockConfig+0x2de>
 80026d8:	40022000 	.word	0x40022000
 80026dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ec:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <HAL_RCC_ClockConfig+0x2e8>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	491a      	ldr	r1, [pc, #104]	; (8002764 <HAL_RCC_ClockConfig+0x2e8>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d009      	beq.n	800271e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800270a:	4b16      	ldr	r3, [pc, #88]	; (8002764 <HAL_RCC_ClockConfig+0x2e8>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4912      	ldr	r1, [pc, #72]	; (8002764 <HAL_RCC_ClockConfig+0x2e8>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800271e:	f000 f829 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 8002722:	4601      	mov	r1, r0
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <HAL_RCC_ClockConfig+0x2e8>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800272c:	22f0      	movs	r2, #240	; 0xf0
 800272e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	fa92 f2a2 	rbit	r2, r2
 8002736:	60fa      	str	r2, [r7, #12]
  return result;
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	fab2 f282 	clz	r2, r2
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	40d3      	lsrs	r3, r2
 8002742:	4a09      	ldr	r2, [pc, #36]	; (8002768 <HAL_RCC_ClockConfig+0x2ec>)
 8002744:	5cd3      	ldrb	r3, [r2, r3]
 8002746:	fa21 f303 	lsr.w	r3, r1, r3
 800274a:	4a08      	ldr	r2, [pc, #32]	; (800276c <HAL_RCC_ClockConfig+0x2f0>)
 800274c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800274e:	4b08      	ldr	r3, [pc, #32]	; (8002770 <HAL_RCC_ClockConfig+0x2f4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7fe fa18 	bl	8000b88 <HAL_InitTick>
  
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3778      	adds	r7, #120	; 0x78
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000
 8002768:	080042d8 	.word	0x080042d8
 800276c:	20000000 	.word	0x20000000
 8002770:	20000004 	.word	0x20000004

08002774 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002774:	b480      	push	{r7}
 8002776:	b08b      	sub	sp, #44	; 0x2c
 8002778:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	2300      	movs	r3, #0
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800278e:	4b29      	ldr	r3, [pc, #164]	; (8002834 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b04      	cmp	r3, #4
 800279c:	d002      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0x30>
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d003      	beq.n	80027aa <HAL_RCC_GetSysClockFreq+0x36>
 80027a2:	e03c      	b.n	800281e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027a4:	4b24      	ldr	r3, [pc, #144]	; (8002838 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027a6:	623b      	str	r3, [r7, #32]
      break;
 80027a8:	e03c      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80027b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80027b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	fa92 f2a2 	rbit	r2, r2
 80027bc:	607a      	str	r2, [r7, #4]
  return result;
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	fab2 f282 	clz	r2, r2
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	40d3      	lsrs	r3, r2
 80027c8:	4a1c      	ldr	r2, [pc, #112]	; (800283c <HAL_RCC_GetSysClockFreq+0xc8>)
 80027ca:	5cd3      	ldrb	r3, [r2, r3]
 80027cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80027ce:	4b19      	ldr	r3, [pc, #100]	; (8002834 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	220f      	movs	r2, #15
 80027d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	fa92 f2a2 	rbit	r2, r2
 80027e0:	60fa      	str	r2, [r7, #12]
  return result;
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	fab2 f282 	clz	r2, r2
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	40d3      	lsrs	r3, r2
 80027ec:	4a14      	ldr	r2, [pc, #80]	; (8002840 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027ee:	5cd3      	ldrb	r3, [r2, r3]
 80027f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027fc:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	fbb2 f2f3 	udiv	r2, r2, r3
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fb02 f303 	mul.w	r3, r2, r3
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
 800280c:	e004      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	4a0c      	ldr	r2, [pc, #48]	; (8002844 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	623b      	str	r3, [r7, #32]
      break;
 800281c:	e002      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002820:	623b      	str	r3, [r7, #32]
      break;
 8002822:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002824:	6a3b      	ldr	r3, [r7, #32]
}
 8002826:	4618      	mov	r0, r3
 8002828:	372c      	adds	r7, #44	; 0x2c
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
 8002838:	007a1200 	.word	0x007a1200
 800283c:	080042f0 	.word	0x080042f0
 8002840:	08004300 	.word	0x08004300
 8002844:	003d0900 	.word	0x003d0900

08002848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <HAL_RCC_GetHCLKFreq+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000000 	.word	0x20000000

08002860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002866:	f7ff ffef 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 800286a:	4601      	mov	r1, r0
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002874:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002878:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	fa92 f2a2 	rbit	r2, r2
 8002880:	603a      	str	r2, [r7, #0]
  return result;
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	fab2 f282 	clz	r2, r2
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	40d3      	lsrs	r3, r2
 800288c:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800288e:	5cd3      	ldrb	r3, [r2, r3]
 8002890:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000
 80028a0:	080042e8 	.word	0x080042e8

080028a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028aa:	f7ff ffcd 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 80028ae:	4601      	mov	r1, r0
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80028b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	fa92 f2a2 	rbit	r2, r2
 80028c4:	603a      	str	r2, [r7, #0]
  return result;
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	fab2 f282 	clz	r2, r2
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	40d3      	lsrs	r3, r2
 80028d0:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80028d2:	5cd3      	ldrb	r3, [r2, r3]
 80028d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000
 80028e4:	080042e8 	.word	0x080042e8

080028e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b092      	sub	sp, #72	; 0x48
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 80d4 	beq.w	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290c:	4b4e      	ldr	r3, [pc, #312]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10e      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002918:	4b4b      	ldr	r3, [pc, #300]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	4a4a      	ldr	r2, [pc, #296]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002922:	61d3      	str	r3, [r2, #28]
 8002924:	4b48      	ldr	r3, [pc, #288]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002936:	4b45      	ldr	r3, [pc, #276]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d118      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002942:	4b42      	ldr	r3, [pc, #264]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a41      	ldr	r2, [pc, #260]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294e:	f7fe f95f 	bl	8000c10 <HAL_GetTick>
 8002952:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002954:	e008      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002956:	f7fe f95b 	bl	8000c10 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b64      	cmp	r3, #100	; 0x64
 8002962:	d901      	bls.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e169      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002968:	4b38      	ldr	r3, [pc, #224]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002974:	4b34      	ldr	r3, [pc, #208]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800297c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800297e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 8084 	beq.w	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002990:	429a      	cmp	r2, r3
 8002992:	d07c      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002994:	4b2c      	ldr	r3, [pc, #176]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800299c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800299e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80029ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029ae:	fab3 f383 	clz	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	4b26      	ldr	r3, [pc, #152]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	461a      	mov	r2, r3
 80029be:	2301      	movs	r3, #1
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	461a      	mov	r2, r3
 80029da:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	461a      	mov	r2, r3
 80029e2:	2300      	movs	r3, #0
 80029e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029e6:	4a18      	ldr	r2, [pc, #96]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d04b      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7fe f90b 	bl	8000c10 <HAL_GetTick>
 80029fa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fc:	e00a      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fe:	f7fe f907 	bl	8000c10 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e113      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002a14:	2302      	movs	r3, #2
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1a:	fa93 f3a3 	rbit	r3, r3
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a20:	2302      	movs	r3, #2
 8002a22:	623b      	str	r3, [r7, #32]
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	61fb      	str	r3, [r7, #28]
  return result;
 8002a2c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	095b      	lsrs	r3, r3, #5
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f043 0302 	orr.w	r3, r3, #2
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d108      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002a42:	4b01      	ldr	r3, [pc, #4]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	e00d      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40007000 	.word	0x40007000
 8002a50:	10908100 	.word	0x10908100
 8002a54:	2302      	movs	r3, #2
 8002a56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	4b78      	ldr	r3, [pc, #480]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	2202      	movs	r2, #2
 8002a66:	613a      	str	r2, [r7, #16]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	fa92 f2a2 	rbit	r2, r2
 8002a6e:	60fa      	str	r2, [r7, #12]
  return result;
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	fab2 f282 	clz	r2, r2
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	f002 021f 	and.w	r2, r2, #31
 8002a82:	2101      	movs	r1, #1
 8002a84:	fa01 f202 	lsl.w	r2, r1, r2
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0b7      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a8e:	4b6d      	ldr	r3, [pc, #436]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	496a      	ldr	r1, [pc, #424]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002aa0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d105      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa8:	4b66      	ldr	r3, [pc, #408]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	4a65      	ldr	r2, [pc, #404]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ac0:	4b60      	ldr	r3, [pc, #384]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	f023 0203 	bic.w	r2, r3, #3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	495d      	ldr	r1, [pc, #372]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d008      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ade:	4b59      	ldr	r3, [pc, #356]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4956      	ldr	r1, [pc, #344]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002afc:	4b51      	ldr	r3, [pc, #324]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	494e      	ldr	r1, [pc, #312]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d008      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b1a:	4b4a      	ldr	r3, [pc, #296]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	f023 0210 	bic.w	r2, r3, #16
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	4947      	ldr	r1, [pc, #284]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002b38:	4b42      	ldr	r3, [pc, #264]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b44:	493f      	ldr	r1, [pc, #252]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d008      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b56:	4b3b      	ldr	r3, [pc, #236]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f023 0220 	bic.w	r2, r3, #32
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	4938      	ldr	r1, [pc, #224]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b74:	4b33      	ldr	r3, [pc, #204]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	4930      	ldr	r1, [pc, #192]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d008      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b92:	4b2c      	ldr	r3, [pc, #176]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	4929      	ldr	r1, [pc, #164]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d008      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bb0:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	4921      	ldr	r1, [pc, #132]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d008      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bce:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	491a      	ldr	r1, [pc, #104]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002bec:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	4912      	ldr	r1, [pc, #72]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	490b      	ldr	r1, [pc, #44]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c34:	4903      	ldr	r1, [pc, #12]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3748      	adds	r7, #72	; 0x48
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40021000 	.word	0x40021000

08002c48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e09d      	b.n	8002d96 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d108      	bne.n	8002c74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c6a:	d009      	beq.n	8002c80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61da      	str	r2, [r3, #28]
 8002c72:	e005      	b.n	8002c80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fd fdfe 	bl	800089c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cc0:	d902      	bls.n	8002cc8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	e002      	b.n	8002cce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ccc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002cd6:	d007      	beq.n	8002ce8 <HAL_SPI_Init+0xa0>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ce0:	d002      	beq.n	8002ce8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2a:	ea42 0103 	orr.w	r1, r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	0c1b      	lsrs	r3, r3, #16
 8002d44:	f003 0204 	and.w	r2, r3, #4
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002d64:	ea42 0103 	orr.w	r1, r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69da      	ldr	r2, [r3, #28]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e040      	b.n	8002e32 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d106      	bne.n	8002dc6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7fd fdad 	bl	8000920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2224      	movs	r2, #36	; 0x24
 8002dca:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0201 	bic.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fb77 	bl	80034d0 <UART_SetConfig>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e022      	b.n	8002e32 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fd3f 	bl	8003878 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e18:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0201 	orr.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fdc6 	bl	80039bc <UART_CheckIdleState>
 8002e30:	4603      	mov	r3, r0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b08a      	sub	sp, #40	; 0x28
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	4613      	mov	r3, r2
 8002e46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e4e:	2b20      	cmp	r3, #32
 8002e50:	d132      	bne.n	8002eb8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <HAL_UART_Receive_IT+0x24>
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e02b      	b.n	8002eba <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d018      	beq.n	8002ea8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	e853 3f00 	ldrex	r3, [r3]
 8002e82:	613b      	str	r3, [r7, #16]
   return(result);
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	623b      	str	r3, [r7, #32]
 8002e96:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e98:	69f9      	ldr	r1, [r7, #28]
 8002e9a:	6a3a      	ldr	r2, [r7, #32]
 8002e9c:	e841 2300 	strex	r3, r2, [r1]
 8002ea0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1e6      	bne.n	8002e76 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ea8:	88fb      	ldrh	r3, [r7, #6]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 fe94 	bl	8003bdc <UART_Start_Receive_IT>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	e000      	b.n	8002eba <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002eb8:	2302      	movs	r3, #2
  }
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3728      	adds	r7, #40	; 0x28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b0ba      	sub	sp, #232	; 0xe8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002eea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002eee:	f640 030f 	movw	r3, #2063	; 0x80f
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002ef8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d115      	bne.n	8002f2c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00f      	beq.n	8002f2c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 82ab 	beq.w	8003478 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
      }
      return;
 8002f2a:	e2a5      	b.n	8003478 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 8117 	beq.w	8003164 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f46:	4b85      	ldr	r3, [pc, #532]	; (800315c <HAL_UART_IRQHandler+0x298>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 810a 	beq.w	8003164 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d011      	beq.n	8002f80 <HAL_UART_IRQHandler+0xbc>
 8002f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00b      	beq.n	8002f80 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d011      	beq.n	8002fb0 <HAL_UART_IRQHandler+0xec>
 8002f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00b      	beq.n	8002fb0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa6:	f043 0204 	orr.w	r2, r3, #4
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d011      	beq.n	8002fe0 <HAL_UART_IRQHandler+0x11c>
 8002fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00b      	beq.n	8002fe0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2204      	movs	r2, #4
 8002fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fd6:	f043 0202 	orr.w	r2, r3, #2
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d017      	beq.n	800301c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d105      	bne.n	8003004 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ffc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00b      	beq.n	800301c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2208      	movs	r2, #8
 800300a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003012:	f043 0208 	orr.w	r2, r3, #8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800301c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003024:	2b00      	cmp	r3, #0
 8003026:	d012      	beq.n	800304e <HAL_UART_IRQHandler+0x18a>
 8003028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800302c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00c      	beq.n	800304e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800303c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003044:	f043 0220 	orr.w	r2, r3, #32
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 8211 	beq.w	800347c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800305a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800305e:	f003 0320 	and.w	r3, r3, #32
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00d      	beq.n	8003082 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	d007      	beq.n	8003082 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003088:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b40      	cmp	r3, #64	; 0x40
 8003098:	d005      	beq.n	80030a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800309a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800309e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d04f      	beq.n	8003146 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fe4c 	bl	8003d44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	d141      	bne.n	800313e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3308      	adds	r3, #8
 80030c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030c8:	e853 3f00 	ldrex	r3, [r3]
 80030cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3308      	adds	r3, #8
 80030e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80030f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030f6:	e841 2300 	strex	r3, r2, [r1]
 80030fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80030fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1d9      	bne.n	80030ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800310a:	2b00      	cmp	r3, #0
 800310c:	d013      	beq.n	8003136 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003112:	4a13      	ldr	r2, [pc, #76]	; (8003160 <HAL_UART_IRQHandler+0x29c>)
 8003114:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311a:	4618      	mov	r0, r3
 800311c:	f7fd fece 	bl	8000ebc <HAL_DMA_Abort_IT>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d017      	beq.n	8003156 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003130:	4610      	mov	r0, r2
 8003132:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003134:	e00f      	b.n	8003156 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f9b4 	bl	80034a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800313c:	e00b      	b.n	8003156 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f9b0 	bl	80034a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003144:	e007      	b.n	8003156 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f9ac 	bl	80034a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003154:	e192      	b.n	800347c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003156:	bf00      	nop
    return;
 8003158:	e190      	b.n	800347c <HAL_UART_IRQHandler+0x5b8>
 800315a:	bf00      	nop
 800315c:	04000120 	.word	0x04000120
 8003160:	08003e0d 	.word	0x08003e0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003168:	2b01      	cmp	r3, #1
 800316a:	f040 814b 	bne.w	8003404 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800316e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 8144 	beq.w	8003404 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 813d 	beq.w	8003404 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2210      	movs	r2, #16
 8003190:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	f040 80b5 	bne.w	800330c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8164 	beq.w	8003480 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80031be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031c2:	429a      	cmp	r2, r3
 80031c4:	f080 815c 	bcs.w	8003480 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	2b20      	cmp	r3, #32
 80031da:	f000 8086 	beq.w	80032ea <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031ea:	e853 3f00 	ldrex	r3, [r3]
 80031ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80031f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003208:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800320c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003210:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003214:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003218:	e841 2300 	strex	r3, r2, [r1]
 800321c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003220:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1da      	bne.n	80031de <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3308      	adds	r3, #8
 800322e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003232:	e853 3f00 	ldrex	r3, [r3]
 8003236:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003238:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800323a:	f023 0301 	bic.w	r3, r3, #1
 800323e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3308      	adds	r3, #8
 8003248:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800324c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003250:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003252:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003254:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003258:	e841 2300 	strex	r3, r2, [r1]
 800325c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800325e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e1      	bne.n	8003228 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3308      	adds	r3, #8
 800326a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800326e:	e853 3f00 	ldrex	r3, [r3]
 8003272:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800327a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	3308      	adds	r3, #8
 8003284:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003288:	66fa      	str	r2, [r7, #108]	; 0x6c
 800328a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800328e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003290:	e841 2300 	strex	r3, r2, [r1]
 8003294:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003296:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e3      	bne.n	8003264 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032b2:	e853 3f00 	ldrex	r3, [r3]
 80032b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ba:	f023 0310 	bic.w	r3, r3, #16
 80032be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80032ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032d4:	e841 2300 	strex	r3, r2, [r1]
 80032d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e4      	bne.n	80032aa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fd fdb0 	bl	8000e4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2202      	movs	r2, #2
 80032ee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	b29b      	uxth	r3, r3
 8003302:	4619      	mov	r1, r3
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f8d7 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800330a:	e0b9      	b.n	8003480 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003318:	b29b      	uxth	r3, r3
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80ab 	beq.w	8003484 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800332e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 80a6 	beq.w	8003484 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003340:	e853 3f00 	ldrex	r3, [r3]
 8003344:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003348:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800334c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800335a:	647b      	str	r3, [r7, #68]	; 0x44
 800335c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e4      	bne.n	8003338 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	3308      	adds	r3, #8
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	e853 3f00 	ldrex	r3, [r3]
 800337c:	623b      	str	r3, [r7, #32]
   return(result);
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3308      	adds	r3, #8
 800338e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003392:	633a      	str	r2, [r7, #48]	; 0x30
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800339a:	e841 2300 	strex	r3, r2, [r1]
 800339e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1e3      	bne.n	800336e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	e853 3f00 	ldrex	r3, [r3]
 80033c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0310 	bic.w	r3, r3, #16
 80033ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e0:	69b9      	ldr	r1, [r7, #24]
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	e841 2300 	strex	r3, r2, [r1]
 80033e8:	617b      	str	r3, [r7, #20]
   return(result);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e4      	bne.n	80033ba <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033fa:	4619      	mov	r1, r3
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f85b 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003402:	e03f      	b.n	8003484 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00e      	beq.n	800342e <HAL_UART_IRQHandler+0x56a>
 8003410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003424:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fed8 	bl	80041dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800342c:	e02d      	b.n	800348a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800342e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00e      	beq.n	8003458 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800343a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800343e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003442:	2b00      	cmp	r3, #0
 8003444:	d008      	beq.n	8003458 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800344a:	2b00      	cmp	r3, #0
 800344c:	d01c      	beq.n	8003488 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	4798      	blx	r3
    }
    return;
 8003456:	e017      	b.n	8003488 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800345c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003460:	2b00      	cmp	r3, #0
 8003462:	d012      	beq.n	800348a <HAL_UART_IRQHandler+0x5c6>
 8003464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00c      	beq.n	800348a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fce1 	bl	8003e38 <UART_EndTransmit_IT>
    return;
 8003476:	e008      	b.n	800348a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003478:	bf00      	nop
 800347a:	e006      	b.n	800348a <HAL_UART_IRQHandler+0x5c6>
    return;
 800347c:	bf00      	nop
 800347e:	e004      	b.n	800348a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003480:	bf00      	nop
 8003482:	e002      	b.n	800348a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003484:	bf00      	nop
 8003486:	e000      	b.n	800348a <HAL_UART_IRQHandler+0x5c6>
    return;
 8003488:	bf00      	nop
  }

}
 800348a:	37e8      	adds	r7, #232	; 0xe8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80034fe:	f023 030c 	bic.w	r3, r3, #12
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	6979      	ldr	r1, [r7, #20]
 8003508:	430b      	orrs	r3, r1
 800350a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	4313      	orrs	r3, r2
 8003530:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	430a      	orrs	r2, r1
 8003544:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4aa7      	ldr	r2, [pc, #668]	; (80037e8 <UART_SetConfig+0x318>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d120      	bne.n	8003592 <UART_SetConfig+0xc2>
 8003550:	4ba6      	ldr	r3, [pc, #664]	; (80037ec <UART_SetConfig+0x31c>)
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b03      	cmp	r3, #3
 800355a:	d817      	bhi.n	800358c <UART_SetConfig+0xbc>
 800355c:	a201      	add	r2, pc, #4	; (adr r2, 8003564 <UART_SetConfig+0x94>)
 800355e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003562:	bf00      	nop
 8003564:	08003575 	.word	0x08003575
 8003568:	08003581 	.word	0x08003581
 800356c:	08003587 	.word	0x08003587
 8003570:	0800357b 	.word	0x0800357b
 8003574:	2301      	movs	r3, #1
 8003576:	77fb      	strb	r3, [r7, #31]
 8003578:	e0b5      	b.n	80036e6 <UART_SetConfig+0x216>
 800357a:	2302      	movs	r3, #2
 800357c:	77fb      	strb	r3, [r7, #31]
 800357e:	e0b2      	b.n	80036e6 <UART_SetConfig+0x216>
 8003580:	2304      	movs	r3, #4
 8003582:	77fb      	strb	r3, [r7, #31]
 8003584:	e0af      	b.n	80036e6 <UART_SetConfig+0x216>
 8003586:	2308      	movs	r3, #8
 8003588:	77fb      	strb	r3, [r7, #31]
 800358a:	e0ac      	b.n	80036e6 <UART_SetConfig+0x216>
 800358c:	2310      	movs	r3, #16
 800358e:	77fb      	strb	r3, [r7, #31]
 8003590:	e0a9      	b.n	80036e6 <UART_SetConfig+0x216>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a96      	ldr	r2, [pc, #600]	; (80037f0 <UART_SetConfig+0x320>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d124      	bne.n	80035e6 <UART_SetConfig+0x116>
 800359c:	4b93      	ldr	r3, [pc, #588]	; (80037ec <UART_SetConfig+0x31c>)
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035a8:	d011      	beq.n	80035ce <UART_SetConfig+0xfe>
 80035aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035ae:	d817      	bhi.n	80035e0 <UART_SetConfig+0x110>
 80035b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035b4:	d011      	beq.n	80035da <UART_SetConfig+0x10a>
 80035b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035ba:	d811      	bhi.n	80035e0 <UART_SetConfig+0x110>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <UART_SetConfig+0xf8>
 80035c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c4:	d006      	beq.n	80035d4 <UART_SetConfig+0x104>
 80035c6:	e00b      	b.n	80035e0 <UART_SetConfig+0x110>
 80035c8:	2300      	movs	r3, #0
 80035ca:	77fb      	strb	r3, [r7, #31]
 80035cc:	e08b      	b.n	80036e6 <UART_SetConfig+0x216>
 80035ce:	2302      	movs	r3, #2
 80035d0:	77fb      	strb	r3, [r7, #31]
 80035d2:	e088      	b.n	80036e6 <UART_SetConfig+0x216>
 80035d4:	2304      	movs	r3, #4
 80035d6:	77fb      	strb	r3, [r7, #31]
 80035d8:	e085      	b.n	80036e6 <UART_SetConfig+0x216>
 80035da:	2308      	movs	r3, #8
 80035dc:	77fb      	strb	r3, [r7, #31]
 80035de:	e082      	b.n	80036e6 <UART_SetConfig+0x216>
 80035e0:	2310      	movs	r3, #16
 80035e2:	77fb      	strb	r3, [r7, #31]
 80035e4:	e07f      	b.n	80036e6 <UART_SetConfig+0x216>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a82      	ldr	r2, [pc, #520]	; (80037f4 <UART_SetConfig+0x324>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d124      	bne.n	800363a <UART_SetConfig+0x16a>
 80035f0:	4b7e      	ldr	r3, [pc, #504]	; (80037ec <UART_SetConfig+0x31c>)
 80035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80035f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80035fc:	d011      	beq.n	8003622 <UART_SetConfig+0x152>
 80035fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003602:	d817      	bhi.n	8003634 <UART_SetConfig+0x164>
 8003604:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003608:	d011      	beq.n	800362e <UART_SetConfig+0x15e>
 800360a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800360e:	d811      	bhi.n	8003634 <UART_SetConfig+0x164>
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <UART_SetConfig+0x14c>
 8003614:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003618:	d006      	beq.n	8003628 <UART_SetConfig+0x158>
 800361a:	e00b      	b.n	8003634 <UART_SetConfig+0x164>
 800361c:	2300      	movs	r3, #0
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	e061      	b.n	80036e6 <UART_SetConfig+0x216>
 8003622:	2302      	movs	r3, #2
 8003624:	77fb      	strb	r3, [r7, #31]
 8003626:	e05e      	b.n	80036e6 <UART_SetConfig+0x216>
 8003628:	2304      	movs	r3, #4
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	e05b      	b.n	80036e6 <UART_SetConfig+0x216>
 800362e:	2308      	movs	r3, #8
 8003630:	77fb      	strb	r3, [r7, #31]
 8003632:	e058      	b.n	80036e6 <UART_SetConfig+0x216>
 8003634:	2310      	movs	r3, #16
 8003636:	77fb      	strb	r3, [r7, #31]
 8003638:	e055      	b.n	80036e6 <UART_SetConfig+0x216>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a6e      	ldr	r2, [pc, #440]	; (80037f8 <UART_SetConfig+0x328>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d124      	bne.n	800368e <UART_SetConfig+0x1be>
 8003644:	4b69      	ldr	r3, [pc, #420]	; (80037ec <UART_SetConfig+0x31c>)
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800364c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003650:	d011      	beq.n	8003676 <UART_SetConfig+0x1a6>
 8003652:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003656:	d817      	bhi.n	8003688 <UART_SetConfig+0x1b8>
 8003658:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800365c:	d011      	beq.n	8003682 <UART_SetConfig+0x1b2>
 800365e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003662:	d811      	bhi.n	8003688 <UART_SetConfig+0x1b8>
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <UART_SetConfig+0x1a0>
 8003668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800366c:	d006      	beq.n	800367c <UART_SetConfig+0x1ac>
 800366e:	e00b      	b.n	8003688 <UART_SetConfig+0x1b8>
 8003670:	2300      	movs	r3, #0
 8003672:	77fb      	strb	r3, [r7, #31]
 8003674:	e037      	b.n	80036e6 <UART_SetConfig+0x216>
 8003676:	2302      	movs	r3, #2
 8003678:	77fb      	strb	r3, [r7, #31]
 800367a:	e034      	b.n	80036e6 <UART_SetConfig+0x216>
 800367c:	2304      	movs	r3, #4
 800367e:	77fb      	strb	r3, [r7, #31]
 8003680:	e031      	b.n	80036e6 <UART_SetConfig+0x216>
 8003682:	2308      	movs	r3, #8
 8003684:	77fb      	strb	r3, [r7, #31]
 8003686:	e02e      	b.n	80036e6 <UART_SetConfig+0x216>
 8003688:	2310      	movs	r3, #16
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e02b      	b.n	80036e6 <UART_SetConfig+0x216>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a5a      	ldr	r2, [pc, #360]	; (80037fc <UART_SetConfig+0x32c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d124      	bne.n	80036e2 <UART_SetConfig+0x212>
 8003698:	4b54      	ldr	r3, [pc, #336]	; (80037ec <UART_SetConfig+0x31c>)
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80036a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036a4:	d011      	beq.n	80036ca <UART_SetConfig+0x1fa>
 80036a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036aa:	d817      	bhi.n	80036dc <UART_SetConfig+0x20c>
 80036ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036b0:	d011      	beq.n	80036d6 <UART_SetConfig+0x206>
 80036b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036b6:	d811      	bhi.n	80036dc <UART_SetConfig+0x20c>
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <UART_SetConfig+0x1f4>
 80036bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c0:	d006      	beq.n	80036d0 <UART_SetConfig+0x200>
 80036c2:	e00b      	b.n	80036dc <UART_SetConfig+0x20c>
 80036c4:	2300      	movs	r3, #0
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	e00d      	b.n	80036e6 <UART_SetConfig+0x216>
 80036ca:	2302      	movs	r3, #2
 80036cc:	77fb      	strb	r3, [r7, #31]
 80036ce:	e00a      	b.n	80036e6 <UART_SetConfig+0x216>
 80036d0:	2304      	movs	r3, #4
 80036d2:	77fb      	strb	r3, [r7, #31]
 80036d4:	e007      	b.n	80036e6 <UART_SetConfig+0x216>
 80036d6:	2308      	movs	r3, #8
 80036d8:	77fb      	strb	r3, [r7, #31]
 80036da:	e004      	b.n	80036e6 <UART_SetConfig+0x216>
 80036dc:	2310      	movs	r3, #16
 80036de:	77fb      	strb	r3, [r7, #31]
 80036e0:	e001      	b.n	80036e6 <UART_SetConfig+0x216>
 80036e2:	2310      	movs	r3, #16
 80036e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ee:	d15b      	bne.n	80037a8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80036f0:	7ffb      	ldrb	r3, [r7, #31]
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d827      	bhi.n	8003746 <UART_SetConfig+0x276>
 80036f6:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <UART_SetConfig+0x22c>)
 80036f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fc:	08003721 	.word	0x08003721
 8003700:	08003729 	.word	0x08003729
 8003704:	08003731 	.word	0x08003731
 8003708:	08003747 	.word	0x08003747
 800370c:	08003737 	.word	0x08003737
 8003710:	08003747 	.word	0x08003747
 8003714:	08003747 	.word	0x08003747
 8003718:	08003747 	.word	0x08003747
 800371c:	0800373f 	.word	0x0800373f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003720:	f7ff f89e 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 8003724:	61b8      	str	r0, [r7, #24]
        break;
 8003726:	e013      	b.n	8003750 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003728:	f7ff f8bc 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 800372c:	61b8      	str	r0, [r7, #24]
        break;
 800372e:	e00f      	b.n	8003750 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003730:	4b33      	ldr	r3, [pc, #204]	; (8003800 <UART_SetConfig+0x330>)
 8003732:	61bb      	str	r3, [r7, #24]
        break;
 8003734:	e00c      	b.n	8003750 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003736:	f7ff f81d 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 800373a:	61b8      	str	r0, [r7, #24]
        break;
 800373c:	e008      	b.n	8003750 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800373e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003742:	61bb      	str	r3, [r7, #24]
        break;
 8003744:	e004      	b.n	8003750 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	77bb      	strb	r3, [r7, #30]
        break;
 800374e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 8082 	beq.w	800385c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	005a      	lsls	r2, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	441a      	add	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	fbb2 f3f3 	udiv	r3, r2, r3
 800376c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b0f      	cmp	r3, #15
 8003772:	d916      	bls.n	80037a2 <UART_SetConfig+0x2d2>
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377a:	d212      	bcs.n	80037a2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	b29b      	uxth	r3, r3
 8003780:	f023 030f 	bic.w	r3, r3, #15
 8003784:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	085b      	lsrs	r3, r3, #1
 800378a:	b29b      	uxth	r3, r3
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	b29a      	uxth	r2, r3
 8003792:	89fb      	ldrh	r3, [r7, #14]
 8003794:	4313      	orrs	r3, r2
 8003796:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	89fa      	ldrh	r2, [r7, #14]
 800379e:	60da      	str	r2, [r3, #12]
 80037a0:	e05c      	b.n	800385c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	77bb      	strb	r3, [r7, #30]
 80037a6:	e059      	b.n	800385c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037a8:	7ffb      	ldrb	r3, [r7, #31]
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d835      	bhi.n	800381a <UART_SetConfig+0x34a>
 80037ae:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <UART_SetConfig+0x2e4>)
 80037b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b4:	080037d9 	.word	0x080037d9
 80037b8:	080037e1 	.word	0x080037e1
 80037bc:	08003805 	.word	0x08003805
 80037c0:	0800381b 	.word	0x0800381b
 80037c4:	0800380b 	.word	0x0800380b
 80037c8:	0800381b 	.word	0x0800381b
 80037cc:	0800381b 	.word	0x0800381b
 80037d0:	0800381b 	.word	0x0800381b
 80037d4:	08003813 	.word	0x08003813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037d8:	f7ff f842 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 80037dc:	61b8      	str	r0, [r7, #24]
        break;
 80037de:	e021      	b.n	8003824 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037e0:	f7ff f860 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 80037e4:	61b8      	str	r0, [r7, #24]
        break;
 80037e6:	e01d      	b.n	8003824 <UART_SetConfig+0x354>
 80037e8:	40013800 	.word	0x40013800
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40004400 	.word	0x40004400
 80037f4:	40004800 	.word	0x40004800
 80037f8:	40004c00 	.word	0x40004c00
 80037fc:	40005000 	.word	0x40005000
 8003800:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003804:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <UART_SetConfig+0x3a4>)
 8003806:	61bb      	str	r3, [r7, #24]
        break;
 8003808:	e00c      	b.n	8003824 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800380a:	f7fe ffb3 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 800380e:	61b8      	str	r0, [r7, #24]
        break;
 8003810:	e008      	b.n	8003824 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003816:	61bb      	str	r3, [r7, #24]
        break;
 8003818:	e004      	b.n	8003824 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	77bb      	strb	r3, [r7, #30]
        break;
 8003822:	bf00      	nop
    }

    if (pclk != 0U)
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d018      	beq.n	800385c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	085a      	lsrs	r2, r3, #1
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	441a      	add	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	fbb2 f3f3 	udiv	r3, r2, r3
 800383c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	2b0f      	cmp	r3, #15
 8003842:	d909      	bls.n	8003858 <UART_SetConfig+0x388>
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384a:	d205      	bcs.n	8003858 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	b29a      	uxth	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60da      	str	r2, [r3, #12]
 8003856:	e001      	b.n	800385c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003868:	7fbb      	ldrb	r3, [r7, #30]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3720      	adds	r7, #32
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	007a1200 	.word	0x007a1200

08003878 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01a      	beq.n	800398e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003976:	d10a      	bne.n	800398e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	605a      	str	r2, [r3, #4]
  }
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b098      	sub	sp, #96	; 0x60
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039cc:	f7fd f920 	bl	8000c10 <HAL_GetTick>
 80039d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d12e      	bne.n	8003a3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e8:	2200      	movs	r2, #0
 80039ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f88c 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d021      	beq.n	8003a3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a0e:	653b      	str	r3, [r7, #80]	; 0x50
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a18:	647b      	str	r3, [r7, #68]	; 0x44
 8003a1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a20:	e841 2300 	strex	r3, r2, [r1]
 8003a24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e6      	bne.n	80039fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e062      	b.n	8003b04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d149      	bne.n	8003ae0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a54:	2200      	movs	r2, #0
 8003a56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f856 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d03c      	beq.n	8003ae0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	623b      	str	r3, [r7, #32]
   return(result);
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a84:	633b      	str	r3, [r7, #48]	; 0x30
 8003a86:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e6      	bne.n	8003a66 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	e853 3f00 	ldrex	r3, [r3]
 8003aa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0301 	bic.w	r3, r3, #1
 8003aae:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ab8:	61fa      	str	r2, [r7, #28]
 8003aba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abc:	69b9      	ldr	r1, [r7, #24]
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	e841 2300 	strex	r3, r2, [r1]
 8003ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1e5      	bne.n	8003a98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e011      	b.n	8003b04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3758      	adds	r7, #88	; 0x58
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b1c:	e049      	b.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b24:	d045      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b26:	f7fd f873 	bl	8000c10 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d302      	bcc.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e048      	b.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d031      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d110      	bne.n	8003b7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2208      	movs	r2, #8
 8003b62:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f8ed 	bl	8003d44 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e029      	b.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b8c:	d111      	bne.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f8d3 	bl	8003d44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e00f      	b.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	bf0c      	ite	eq
 8003bc2:	2301      	moveq	r3, #1
 8003bc4:	2300      	movne	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d0a6      	beq.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b097      	sub	sp, #92	; 0x5c
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	88fa      	ldrh	r2, [r7, #6]
 8003bf4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	88fa      	ldrh	r2, [r7, #6]
 8003bfc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0e:	d10e      	bne.n	8003c2e <UART_Start_Receive_IT+0x52>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d105      	bne.n	8003c24 <UART_Start_Receive_IT+0x48>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003c1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c22:	e01a      	b.n	8003c5a <UART_Start_Receive_IT+0x7e>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	22ff      	movs	r2, #255	; 0xff
 8003c28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c2c:	e015      	b.n	8003c5a <UART_Start_Receive_IT+0x7e>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10d      	bne.n	8003c52 <UART_Start_Receive_IT+0x76>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d104      	bne.n	8003c48 <UART_Start_Receive_IT+0x6c>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	22ff      	movs	r2, #255	; 0xff
 8003c42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c46:	e008      	b.n	8003c5a <UART_Start_Receive_IT+0x7e>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	227f      	movs	r2, #127	; 0x7f
 8003c4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c50:	e003      	b.n	8003c5a <UART_Start_Receive_IT+0x7e>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2222      	movs	r2, #34	; 0x22
 8003c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3308      	adds	r3, #8
 8003c70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	657b      	str	r3, [r7, #84]	; 0x54
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3308      	adds	r3, #8
 8003c88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c92:	e841 2300 	strex	r3, r2, [r1]
 8003c96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e5      	bne.n	8003c6a <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca6:	d107      	bne.n	8003cb8 <UART_Start_Receive_IT+0xdc>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d103      	bne.n	8003cb8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4a22      	ldr	r2, [pc, #136]	; (8003d3c <UART_Start_Receive_IT+0x160>)
 8003cb4:	669a      	str	r2, [r3, #104]	; 0x68
 8003cb6:	e002      	b.n	8003cbe <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4a21      	ldr	r2, [pc, #132]	; (8003d40 <UART_Start_Receive_IT+0x164>)
 8003cbc:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d019      	beq.n	8003cfa <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cce:	e853 3f00 	ldrex	r3, [r3]
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cec:	e841 2300 	strex	r3, r2, [r1]
 8003cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e6      	bne.n	8003cc6 <UART_Start_Receive_IT+0xea>
 8003cf8:	e018      	b.n	8003d2c <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	613b      	str	r3, [r7, #16]
   return(result);
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f043 0320 	orr.w	r3, r3, #32
 8003d0e:	653b      	str	r3, [r7, #80]	; 0x50
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d18:	623b      	str	r3, [r7, #32]
 8003d1a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	69f9      	ldr	r1, [r7, #28]
 8003d1e:	6a3a      	ldr	r2, [r7, #32]
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e6      	bne.n	8003cfa <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	375c      	adds	r7, #92	; 0x5c
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	08004035 	.word	0x08004035
 8003d40:	08003e8d 	.word	0x08003e8d

08003d44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b095      	sub	sp, #84	; 0x54
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d6a:	643b      	str	r3, [r7, #64]	; 0x40
 8003d6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1e6      	bne.n	8003d4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3308      	adds	r3, #8
 8003d84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	e853 3f00 	ldrex	r3, [r3]
 8003d8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3308      	adds	r3, #8
 8003d9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003da0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003da6:	e841 2300 	strex	r3, r2, [r1]
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1e5      	bne.n	8003d7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d118      	bne.n	8003dec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	e853 3f00 	ldrex	r3, [r3]
 8003dc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f023 0310 	bic.w	r3, r3, #16
 8003dce:	647b      	str	r3, [r7, #68]	; 0x44
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ddc:	6979      	ldr	r1, [r7, #20]
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	e841 2300 	strex	r3, r2, [r1]
 8003de4:	613b      	str	r3, [r7, #16]
   return(result);
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e6      	bne.n	8003dba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e00:	bf00      	nop
 8003e02:	3754      	adds	r7, #84	; 0x54
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f7ff fb3a 	bl	80034a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e30:	bf00      	nop
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e62:	6979      	ldr	r1, [r7, #20]
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e6      	bne.n	8003e40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff fb06 	bl	8003490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e84:	bf00      	nop
 8003e86:	3720      	adds	r7, #32
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b09c      	sub	sp, #112	; 0x70
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e9a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ea4:	2b22      	cmp	r3, #34	; 0x22
 8003ea6:	f040 80b9 	bne.w	800401c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003eb0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003eb4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003eb8:	b2d9      	uxtb	r1, r3
 8003eba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f040 809c 	bne.w	800402c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f08:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f12:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f14:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1e6      	bne.n	8003ef4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3308      	adds	r3, #8
 8003f2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	667b      	str	r3, [r7, #100]	; 0x64
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3308      	adds	r3, #8
 8003f44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003f46:	647a      	str	r2, [r7, #68]	; 0x44
 8003f48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e5      	bne.n	8003f26 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d018      	beq.n	8003fae <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	623b      	str	r3, [r7, #32]
   return(result);
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f90:	663b      	str	r3, [r7, #96]	; 0x60
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f9c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e6      	bne.n	8003f7c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d12e      	bne.n	8004014 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	e853 3f00 	ldrex	r3, [r3]
 8003fc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f023 0310 	bic.w	r3, r3, #16
 8003fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	69b9      	ldr	r1, [r7, #24]
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	617b      	str	r3, [r7, #20]
   return(result);
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e6      	bne.n	8003fbc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d103      	bne.n	8004004 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2210      	movs	r2, #16
 8004002:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800400a:	4619      	mov	r1, r3
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff fa53 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004012:	e00b      	b.n	800402c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7fc fa15 	bl	8000444 <HAL_UART_RxCpltCallback>
}
 800401a:	e007      	b.n	800402c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0208 	orr.w	r2, r2, #8
 800402a:	619a      	str	r2, [r3, #24]
}
 800402c:	bf00      	nop
 800402e:	3770      	adds	r7, #112	; 0x70
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b09c      	sub	sp, #112	; 0x70
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004042:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800404c:	2b22      	cmp	r3, #34	; 0x22
 800404e:	f040 80b9 	bne.w	80041c4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004058:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004060:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004062:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004066:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800406a:	4013      	ands	r3, r2
 800406c:	b29a      	uxth	r2, r3
 800406e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004070:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004076:	1c9a      	adds	r2, r3, #2
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	f040 809c 	bne.w	80041d4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040a4:	e853 3f00 	ldrex	r3, [r3]
 80040a8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80040aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040b0:	667b      	str	r3, [r7, #100]	; 0x64
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ba:	657b      	str	r3, [r7, #84]	; 0x54
 80040bc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80040c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040c2:	e841 2300 	strex	r3, r2, [r1]
 80040c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80040c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1e6      	bne.n	800409c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3308      	adds	r3, #8
 80040d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	663b      	str	r3, [r7, #96]	; 0x60
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3308      	adds	r3, #8
 80040ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040ee:	643a      	str	r2, [r7, #64]	; 0x40
 80040f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e5      	bne.n	80040ce <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d018      	beq.n	8004156 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	e853 3f00 	ldrex	r3, [r3]
 8004130:	61fb      	str	r3, [r7, #28]
   return(result);
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004138:	65fb      	str	r3, [r7, #92]	; 0x5c
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	461a      	mov	r2, r3
 8004140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004144:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004146:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1e6      	bne.n	8004124 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800415a:	2b01      	cmp	r3, #1
 800415c:	d12e      	bne.n	80041bc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	e853 3f00 	ldrex	r3, [r3]
 8004170:	60bb      	str	r3, [r7, #8]
   return(result);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f023 0310 	bic.w	r3, r3, #16
 8004178:	65bb      	str	r3, [r7, #88]	; 0x58
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004182:	61bb      	str	r3, [r7, #24]
 8004184:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004186:	6979      	ldr	r1, [r7, #20]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	e841 2300 	strex	r3, r2, [r1]
 800418e:	613b      	str	r3, [r7, #16]
   return(result);
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e6      	bne.n	8004164 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	f003 0310 	and.w	r3, r3, #16
 80041a0:	2b10      	cmp	r3, #16
 80041a2:	d103      	bne.n	80041ac <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2210      	movs	r2, #16
 80041aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80041b2:	4619      	mov	r1, r3
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7ff f97f 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041ba:	e00b      	b.n	80041d4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7fc f941 	bl	8000444 <HAL_UART_RxCpltCallback>
}
 80041c2:	e007      	b.n	80041d4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0208 	orr.w	r2, r2, #8
 80041d2:	619a      	str	r2, [r3, #24]
}
 80041d4:	bf00      	nop
 80041d6:	3770      	adds	r7, #112	; 0x70
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80041fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	b29b      	uxth	r3, r3
 800420a:	43db      	mvns	r3, r3
 800420c:	b29b      	uxth	r3, r3
 800420e:	4013      	ands	r3, r2
 8004210:	b29a      	uxth	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004226:	b084      	sub	sp, #16
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	f107 0014 	add.w	r0, r7, #20
 8004234:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	b004      	add	sp, #16
 8004266:	4770      	bx	lr

08004268 <__libc_init_array>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	4d0d      	ldr	r5, [pc, #52]	; (80042a0 <__libc_init_array+0x38>)
 800426c:	4c0d      	ldr	r4, [pc, #52]	; (80042a4 <__libc_init_array+0x3c>)
 800426e:	1b64      	subs	r4, r4, r5
 8004270:	10a4      	asrs	r4, r4, #2
 8004272:	2600      	movs	r6, #0
 8004274:	42a6      	cmp	r6, r4
 8004276:	d109      	bne.n	800428c <__libc_init_array+0x24>
 8004278:	4d0b      	ldr	r5, [pc, #44]	; (80042a8 <__libc_init_array+0x40>)
 800427a:	4c0c      	ldr	r4, [pc, #48]	; (80042ac <__libc_init_array+0x44>)
 800427c:	f000 f820 	bl	80042c0 <_init>
 8004280:	1b64      	subs	r4, r4, r5
 8004282:	10a4      	asrs	r4, r4, #2
 8004284:	2600      	movs	r6, #0
 8004286:	42a6      	cmp	r6, r4
 8004288:	d105      	bne.n	8004296 <__libc_init_array+0x2e>
 800428a:	bd70      	pop	{r4, r5, r6, pc}
 800428c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004290:	4798      	blx	r3
 8004292:	3601      	adds	r6, #1
 8004294:	e7ee      	b.n	8004274 <__libc_init_array+0xc>
 8004296:	f855 3b04 	ldr.w	r3, [r5], #4
 800429a:	4798      	blx	r3
 800429c:	3601      	adds	r6, #1
 800429e:	e7f2      	b.n	8004286 <__libc_init_array+0x1e>
 80042a0:	08004310 	.word	0x08004310
 80042a4:	08004310 	.word	0x08004310
 80042a8:	08004310 	.word	0x08004310
 80042ac:	08004314 	.word	0x08004314

080042b0 <memset>:
 80042b0:	4402      	add	r2, r0
 80042b2:	4603      	mov	r3, r0
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d100      	bne.n	80042ba <memset+0xa>
 80042b8:	4770      	bx	lr
 80042ba:	f803 1b01 	strb.w	r1, [r3], #1
 80042be:	e7f9      	b.n	80042b4 <memset+0x4>

080042c0 <_init>:
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c2:	bf00      	nop
 80042c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c6:	bc08      	pop	{r3}
 80042c8:	469e      	mov	lr, r3
 80042ca:	4770      	bx	lr

080042cc <_fini>:
 80042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ce:	bf00      	nop
 80042d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d2:	bc08      	pop	{r3}
 80042d4:	469e      	mov	lr, r3
 80042d6:	4770      	bx	lr
