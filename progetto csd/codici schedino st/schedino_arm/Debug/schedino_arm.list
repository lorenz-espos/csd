
schedino_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003880  08003880  00013880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038b8  080038b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080038b8  080038b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038b8  080038b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038bc  080038bc  000138bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000ac  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ae76  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a0d  00000000  00000000  0002aeb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  0002c8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006d0  00000000  00000000  0002d028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c366  00000000  00000000  0002d6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a8d8  00000000  00000000  00049a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a95aa  00000000  00000000  00054336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fd8e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001cd4  00000000  00000000  000fd930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003868 	.word	0x08003868

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003868 	.word	0x08003868

080001c8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
msg++;
 80001d2:	4b34      	ldr	r3, [pc, #208]	; (80002a4 <HAL_GPIO_EXTI_Callback+0xdc>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	3301      	adds	r3, #1
 80001d8:	4a32      	ldr	r2, [pc, #200]	; (80002a4 <HAL_GPIO_EXTI_Callback+0xdc>)
 80001da:	6013      	str	r3, [r2, #0]
if(msg==5){
 80001dc:	4b31      	ldr	r3, [pc, #196]	; (80002a4 <HAL_GPIO_EXTI_Callback+0xdc>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	2b05      	cmp	r3, #5
 80001e2:	d11f      	bne.n	8000224 <HAL_GPIO_EXTI_Callback+0x5c>
//resetto i led
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8,GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ea:	482f      	ldr	r0, [pc, #188]	; (80002a8 <HAL_GPIO_EXTI_Callback+0xe0>)
 80001ec:	f000 fde8 	bl	8000dc0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9,GPIO_PIN_RESET);
 80001f0:	2200      	movs	r2, #0
 80001f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001f6:	482c      	ldr	r0, [pc, #176]	; (80002a8 <HAL_GPIO_EXTI_Callback+0xe0>)
 80001f8:	f000 fde2 	bl	8000dc0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000202:	4829      	ldr	r0, [pc, #164]	; (80002a8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000204:	f000 fddc 	bl	8000dc0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,GPIO_PIN_RESET);
 8000208:	2200      	movs	r2, #0
 800020a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800020e:	4826      	ldr	r0, [pc, #152]	; (80002a8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000210:	f000 fdd6 	bl	8000dc0 <HAL_GPIO_WritePin>
//resetto il telecomando
msg=0;
 8000214:	4b23      	ldr	r3, [pc, #140]	; (80002a4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
HAL_UART_Transmit_IT(&huart5, (uint8_t*)&msg, sizeof (uint32_t));
 800021a:	2204      	movs	r2, #4
 800021c:	4921      	ldr	r1, [pc, #132]	; (80002a4 <HAL_GPIO_EXTI_Callback+0xdc>)
 800021e:	4823      	ldr	r0, [pc, #140]	; (80002ac <HAL_GPIO_EXTI_Callback+0xe4>)
 8000220:	f002 faa2 	bl	8002768 <HAL_UART_Transmit_IT>
//invio il reset alla parte operativa
}
if (msg==1){
 8000224:	4b1f      	ldr	r3, [pc, #124]	; (80002a4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	2b01      	cmp	r3, #1
 800022a:	d10a      	bne.n	8000242 <HAL_GPIO_EXTI_Callback+0x7a>
//invio la modalità 1
HAL_UART_Transmit_IT(&huart5, (uint8_t*)&msg, sizeof (uint32_t));
 800022c:	2204      	movs	r2, #4
 800022e:	491d      	ldr	r1, [pc, #116]	; (80002a4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000230:	481e      	ldr	r0, [pc, #120]	; (80002ac <HAL_GPIO_EXTI_Callback+0xe4>)
 8000232:	f002 fa99 	bl	8002768 <HAL_UART_Transmit_IT>
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8,GPIO_PIN_SET);
 8000236:	2201      	movs	r2, #1
 8000238:	f44f 7180 	mov.w	r1, #256	; 0x100
 800023c:	481a      	ldr	r0, [pc, #104]	; (80002a8 <HAL_GPIO_EXTI_Callback+0xe0>)
 800023e:	f000 fdbf 	bl	8000dc0 <HAL_GPIO_WritePin>

}
if (msg==2){
 8000242:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2b02      	cmp	r3, #2
 8000248:	d10a      	bne.n	8000260 <HAL_GPIO_EXTI_Callback+0x98>
//invio la modalità 2
HAL_UART_Transmit_IT(&huart5, (uint8_t*)&msg, sizeof (uint32_t));
 800024a:	2204      	movs	r2, #4
 800024c:	4915      	ldr	r1, [pc, #84]	; (80002a4 <HAL_GPIO_EXTI_Callback+0xdc>)
 800024e:	4817      	ldr	r0, [pc, #92]	; (80002ac <HAL_GPIO_EXTI_Callback+0xe4>)
 8000250:	f002 fa8a 	bl	8002768 <HAL_UART_Transmit_IT>
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9,GPIO_PIN_SET);
 8000254:	2201      	movs	r2, #1
 8000256:	f44f 7100 	mov.w	r1, #512	; 0x200
 800025a:	4813      	ldr	r0, [pc, #76]	; (80002a8 <HAL_GPIO_EXTI_Callback+0xe0>)
 800025c:	f000 fdb0 	bl	8000dc0 <HAL_GPIO_WritePin>

}
if (msg==3){
 8000260:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2b03      	cmp	r3, #3
 8000266:	d10a      	bne.n	800027e <HAL_GPIO_EXTI_Callback+0xb6>
//invio la modalità 3
HAL_UART_Transmit_IT(&huart5, (uint8_t*)&msg, sizeof (uint32_t));
 8000268:	2204      	movs	r2, #4
 800026a:	490e      	ldr	r1, [pc, #56]	; (80002a4 <HAL_GPIO_EXTI_Callback+0xdc>)
 800026c:	480f      	ldr	r0, [pc, #60]	; (80002ac <HAL_GPIO_EXTI_Callback+0xe4>)
 800026e:	f002 fa7b 	bl	8002768 <HAL_UART_Transmit_IT>
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,GPIO_PIN_SET);
 8000272:	2201      	movs	r2, #1
 8000274:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000278:	480b      	ldr	r0, [pc, #44]	; (80002a8 <HAL_GPIO_EXTI_Callback+0xe0>)
 800027a:	f000 fda1 	bl	8000dc0 <HAL_GPIO_WritePin>

}
if (msg==4){
 800027e:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	2b04      	cmp	r3, #4
 8000284:	d10a      	bne.n	800029c <HAL_GPIO_EXTI_Callback+0xd4>
//invio la modalità 4
HAL_UART_Transmit_IT(&huart5, (uint8_t*)&msg, sizeof (uint32_t));
 8000286:	2204      	movs	r2, #4
 8000288:	4906      	ldr	r1, [pc, #24]	; (80002a4 <HAL_GPIO_EXTI_Callback+0xdc>)
 800028a:	4808      	ldr	r0, [pc, #32]	; (80002ac <HAL_GPIO_EXTI_Callback+0xe4>)
 800028c:	f002 fa6c 	bl	8002768 <HAL_UART_Transmit_IT>
HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,GPIO_PIN_SET);
 8000290:	2201      	movs	r2, #1
 8000292:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000296:	4804      	ldr	r0, [pc, #16]	; (80002a8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000298:	f000 fd92 	bl	8000dc0 <HAL_GPIO_WritePin>
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	200000b0 	.word	0x200000b0
 80002a8:	48001000 	.word	0x48001000
 80002ac:	20000028 	.word	0x20000028

080002b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b4:	f000 fa1c 	bl	80006f0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b8:	f000 f805 	bl	80002c6 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002bc:	f000 f88a 	bl	80003d4 <MX_GPIO_Init>
  MX_UART5_Init();
 80002c0:	f000 f858 	bl	8000374 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
 80002c4:	e7fe      	b.n	80002c4 <main+0x14>

080002c6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c6:	b580      	push	{r7, lr}
 80002c8:	b09e      	sub	sp, #120	; 0x78
 80002ca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002d0:	2228      	movs	r2, #40	; 0x28
 80002d2:	2100      	movs	r1, #0
 80002d4:	4618      	mov	r0, r3
 80002d6:	f003 fabf 	bl	8003858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ea:	463b      	mov	r3, r7
 80002ec:	223c      	movs	r2, #60	; 0x3c
 80002ee:	2100      	movs	r1, #0
 80002f0:	4618      	mov	r0, r3
 80002f2:	f003 fab1 	bl	8003858 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f6:	2302      	movs	r3, #2
 80002f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fa:	2301      	movs	r3, #1
 80002fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fe:	2310      	movs	r3, #16
 8000300:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000302:	2300      	movs	r3, #0
 8000304:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000306:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800030a:	4618      	mov	r0, r3
 800030c:	f000 fd88 	bl	8000e20 <HAL_RCC_OscConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000316:	f000 f8dd 	bl	80004d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031a:	230f      	movs	r3, #15
 800031c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031e:	2300      	movs	r3, #0
 8000320:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f001 fdb1 	bl	8001e9c <HAL_RCC_ClockConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000340:	f000 f8c8 	bl	80004d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000344:	2310      	movs	r3, #16
 8000346:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000348:	2300      	movs	r3, #0
 800034a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034c:	463b      	mov	r3, r7
 800034e:	4618      	mov	r0, r3
 8000350:	f002 f80c 	bl	800236c <HAL_RCCEx_PeriphCLKConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x98>
  {
    Error_Handler();
 800035a:	f000 f8bb 	bl	80004d4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 800035e:	2200      	movs	r2, #0
 8000360:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000364:	2000      	movs	r0, #0
 8000366:	f001 ff15 	bl	8002194 <HAL_RCC_MCOConfig>
}
 800036a:	bf00      	nop
 800036c:	3778      	adds	r7, #120	; 0x78
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <MX_UART5_Init+0x58>)
 800037a:	4a15      	ldr	r2, [pc, #84]	; (80003d0 <MX_UART5_Init+0x5c>)
 800037c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 10500;
 800037e:	4b13      	ldr	r3, [pc, #76]	; (80003cc <MX_UART5_Init+0x58>)
 8000380:	f642 1204 	movw	r2, #10500	; 0x2904
 8000384:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <MX_UART5_Init+0x58>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_UART5_Init+0x58>)
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_UART5_Init+0x58>)
 8000394:	2200      	movs	r2, #0
 8000396:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_UART5_Init+0x58>)
 800039a:	220c      	movs	r2, #12
 800039c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <MX_UART5_Init+0x58>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_UART5_Init+0x58>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <MX_UART5_Init+0x58>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_UART5_Init+0x58>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80003b6:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_UART5_Init+0x58>)
 80003b8:	f002 f988 	bl	80026cc <HAL_UART_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80003c2:	f000 f887 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000028 	.word	0x20000028
 80003d0:	40005000 	.word	0x40005000

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08a      	sub	sp, #40	; 0x28
 80003d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	f107 0314 	add.w	r3, r7, #20
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
 80003e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b38      	ldr	r3, [pc, #224]	; (80004cc <MX_GPIO_Init+0xf8>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a37      	ldr	r2, [pc, #220]	; (80004cc <MX_GPIO_Init+0xf8>)
 80003f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f4:	6153      	str	r3, [r2, #20]
 80003f6:	4b35      	ldr	r3, [pc, #212]	; (80004cc <MX_GPIO_Init+0xf8>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003fe:	613b      	str	r3, [r7, #16]
 8000400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000402:	4b32      	ldr	r3, [pc, #200]	; (80004cc <MX_GPIO_Init+0xf8>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a31      	ldr	r2, [pc, #196]	; (80004cc <MX_GPIO_Init+0xf8>)
 8000408:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b2f      	ldr	r3, [pc, #188]	; (80004cc <MX_GPIO_Init+0xf8>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041a:	4b2c      	ldr	r3, [pc, #176]	; (80004cc <MX_GPIO_Init+0xf8>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a2b      	ldr	r2, [pc, #172]	; (80004cc <MX_GPIO_Init+0xf8>)
 8000420:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b29      	ldr	r3, [pc, #164]	; (80004cc <MX_GPIO_Init+0xf8>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000432:	4b26      	ldr	r3, [pc, #152]	; (80004cc <MX_GPIO_Init+0xf8>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a25      	ldr	r2, [pc, #148]	; (80004cc <MX_GPIO_Init+0xf8>)
 8000438:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b23      	ldr	r3, [pc, #140]	; (80004cc <MX_GPIO_Init+0xf8>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000450:	481f      	ldr	r0, [pc, #124]	; (80004d0 <MX_GPIO_Init+0xfc>)
 8000452:	f000 fcb5 	bl	8000dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000456:	2301      	movs	r3, #1
 8000458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800045a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800045e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000464:	f107 0314 	add.w	r3, r7, #20
 8000468:	4619      	mov	r1, r3
 800046a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046e:	f000 fb2d 	bl	8000acc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 PE10 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000472:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000478:	2301      	movs	r3, #1
 800047a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000480:	2300      	movs	r3, #0
 8000482:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000484:	f107 0314 	add.w	r3, r7, #20
 8000488:	4619      	mov	r1, r3
 800048a:	4811      	ldr	r0, [pc, #68]	; (80004d0 <MX_GPIO_Init+0xfc>)
 800048c:	f000 fb1e 	bl	8000acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000496:	2302      	movs	r3, #2
 8000498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	2300      	movs	r3, #0
 80004a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80004a2:	2300      	movs	r3, #0
 80004a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a6:	f107 0314 	add.w	r3, r7, #20
 80004aa:	4619      	mov	r1, r3
 80004ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b0:	f000 fb0c 	bl	8000acc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2100      	movs	r1, #0
 80004b8:	2006      	movs	r0, #6
 80004ba:	f000 fa5a 	bl	8000972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80004be:	2006      	movs	r0, #6
 80004c0:	f000 fa73 	bl	80009aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004c4:	bf00      	nop
 80004c6:	3728      	adds	r7, #40	; 0x28
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40021000 	.word	0x40021000
 80004d0:	48001000 	.word	0x48001000

080004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <HAL_MspInit+0x44>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <HAL_MspInit+0x44>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6193      	str	r3, [r2, #24]
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <HAL_MspInit+0x44>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <HAL_MspInit+0x44>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	4a08      	ldr	r2, [pc, #32]	; (8000528 <HAL_MspInit+0x44>)
 8000508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050c:	61d3      	str	r3, [r2, #28]
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_MspInit+0x44>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000

0800052c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a29      	ldr	r2, [pc, #164]	; (80005f0 <HAL_UART_MspInit+0xc4>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d14c      	bne.n	80005e8 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800054e:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <HAL_UART_MspInit+0xc8>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	4a28      	ldr	r2, [pc, #160]	; (80005f4 <HAL_UART_MspInit+0xc8>)
 8000554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000558:	61d3      	str	r3, [r2, #28]
 800055a:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <HAL_UART_MspInit+0xc8>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000566:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <HAL_UART_MspInit+0xc8>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a22      	ldr	r2, [pc, #136]	; (80005f4 <HAL_UART_MspInit+0xc8>)
 800056c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000570:	6153      	str	r3, [r2, #20]
 8000572:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <HAL_UART_MspInit+0xc8>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <HAL_UART_MspInit+0xc8>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <HAL_UART_MspInit+0xc8>)
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <HAL_UART_MspInit+0xc8>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059c:	2302      	movs	r3, #2
 800059e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a4:	2303      	movs	r3, #3
 80005a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80005a8:	2305      	movs	r3, #5
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4619      	mov	r1, r3
 80005b2:	4811      	ldr	r0, [pc, #68]	; (80005f8 <HAL_UART_MspInit+0xcc>)
 80005b4:	f000 fa8a 	bl	8000acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005b8:	2304      	movs	r3, #4
 80005ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005bc:	2302      	movs	r3, #2
 80005be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c4:	2303      	movs	r3, #3
 80005c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80005c8:	2305      	movs	r3, #5
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4619      	mov	r1, r3
 80005d2:	480a      	ldr	r0, [pc, #40]	; (80005fc <HAL_UART_MspInit+0xd0>)
 80005d4:	f000 fa7a 	bl	8000acc <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	2100      	movs	r1, #0
 80005dc:	2035      	movs	r0, #53	; 0x35
 80005de:	f000 f9c8 	bl	8000972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80005e2:	2035      	movs	r0, #53	; 0x35
 80005e4:	f000 f9e1 	bl	80009aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80005e8:	bf00      	nop
 80005ea:	3728      	adds	r7, #40	; 0x28
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40005000 	.word	0x40005000
 80005f4:	40021000 	.word	0x40021000
 80005f8:	48000800 	.word	0x48000800
 80005fc:	48000c00 	.word	0x48000c00

08000600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <NMI_Handler+0x4>

08000606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <HardFault_Handler+0x4>

0800060c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <MemManage_Handler+0x4>

08000612 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000616:	e7fe      	b.n	8000616 <BusFault_Handler+0x4>

08000618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800061c:	e7fe      	b.n	800061c <UsageFault_Handler+0x4>

0800061e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064c:	f000 f896 	bl	800077c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}

08000654 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000658:	2001      	movs	r0, #1
 800065a:	f000 fbc9 	bl	8000df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000668:	4802      	ldr	r0, [pc, #8]	; (8000674 <UART5_IRQHandler+0x10>)
 800066a:	f002 f8db 	bl	8002824 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000028 	.word	0x20000028

08000678 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <SystemInit+0x20>)
 800067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000682:	4a05      	ldr	r2, [pc, #20]	; (8000698 <SystemInit+0x20>)
 8000684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800069c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006d4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a0:	f7ff ffea 	bl	8000678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a6:	490d      	ldr	r1, [pc, #52]	; (80006dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <LoopForever+0xe>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006bc:	4c0a      	ldr	r4, [pc, #40]	; (80006e8 <LoopForever+0x16>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ca:	f003 f8a1 	bl	8003810 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ce:	f7ff fdef 	bl	80002b0 <main>

080006d2 <LoopForever>:

LoopForever:
    b LoopForever
 80006d2:	e7fe      	b.n	80006d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006d4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006e0:	080038c0 	.word	0x080038c0
  ldr r2, =_sbss
 80006e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006e8:	200000b8 	.word	0x200000b8

080006ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC1_2_IRQHandler>
	...

080006f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <HAL_Init+0x28>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a07      	ldr	r2, [pc, #28]	; (8000718 <HAL_Init+0x28>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000700:	2003      	movs	r0, #3
 8000702:	f000 f92b 	bl	800095c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000706:	200f      	movs	r0, #15
 8000708:	f000 f808 	bl	800071c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800070c:	f7ff feea 	bl	80004e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40022000 	.word	0x40022000

0800071c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_InitTick+0x54>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_InitTick+0x58>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000732:	fbb3 f3f1 	udiv	r3, r3, r1
 8000736:	fbb2 f3f3 	udiv	r3, r2, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f943 	bl	80009c6 <HAL_SYSTICK_Config>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e00e      	b.n	8000768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b0f      	cmp	r3, #15
 800074e:	d80a      	bhi.n	8000766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000750:	2200      	movs	r2, #0
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000758:	f000 f90b 	bl	8000972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800075c:	4a06      	ldr	r2, [pc, #24]	; (8000778 <HAL_InitTick+0x5c>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000762:	2300      	movs	r3, #0
 8000764:	e000      	b.n	8000768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
}
 8000768:	4618      	mov	r0, r3
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000000 	.word	0x20000000
 8000774:	20000008 	.word	0x20000008
 8000778:	20000004 	.word	0x20000004

0800077c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_IncTick+0x20>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_IncTick+0x24>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <HAL_IncTick+0x24>)
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	20000008 	.word	0x20000008
 80007a0:	200000b4 	.word	0x200000b4

080007a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80007a8:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <HAL_GetTick+0x14>)
 80007aa:	681b      	ldr	r3, [r3, #0]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	200000b4 	.word	0x200000b4

080007bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <__NVIC_SetPriorityGrouping+0x44>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007d8:	4013      	ands	r3, r2
 80007da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ee:	4a04      	ldr	r2, [pc, #16]	; (8000800 <__NVIC_SetPriorityGrouping+0x44>)
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	60d3      	str	r3, [r2, #12]
}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <__NVIC_GetPriorityGrouping+0x18>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	0a1b      	lsrs	r3, r3, #8
 800080e:	f003 0307 	and.w	r3, r3, #7
}
 8000812:	4618      	mov	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	2b00      	cmp	r3, #0
 8000830:	db0b      	blt.n	800084a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	f003 021f 	and.w	r2, r3, #31
 8000838:	4907      	ldr	r1, [pc, #28]	; (8000858 <__NVIC_EnableIRQ+0x38>)
 800083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083e:	095b      	lsrs	r3, r3, #5
 8000840:	2001      	movs	r0, #1
 8000842:	fa00 f202 	lsl.w	r2, r0, r2
 8000846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000e100 	.word	0xe000e100

0800085c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086c:	2b00      	cmp	r3, #0
 800086e:	db0a      	blt.n	8000886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	b2da      	uxtb	r2, r3
 8000874:	490c      	ldr	r1, [pc, #48]	; (80008a8 <__NVIC_SetPriority+0x4c>)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	0112      	lsls	r2, r2, #4
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	440b      	add	r3, r1
 8000880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000884:	e00a      	b.n	800089c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4908      	ldr	r1, [pc, #32]	; (80008ac <__NVIC_SetPriority+0x50>)
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	f003 030f 	and.w	r3, r3, #15
 8000892:	3b04      	subs	r3, #4
 8000894:	0112      	lsls	r2, r2, #4
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	440b      	add	r3, r1
 800089a:	761a      	strb	r2, [r3, #24]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b089      	sub	sp, #36	; 0x24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	f1c3 0307 	rsb	r3, r3, #7
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	bf28      	it	cs
 80008ce:	2304      	movcs	r3, #4
 80008d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	3304      	adds	r3, #4
 80008d6:	2b06      	cmp	r3, #6
 80008d8:	d902      	bls.n	80008e0 <NVIC_EncodePriority+0x30>
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3b03      	subs	r3, #3
 80008de:	e000      	b.n	80008e2 <NVIC_EncodePriority+0x32>
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43da      	mvns	r2, r3
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	401a      	ands	r2, r3
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000902:	43d9      	mvns	r1, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	4313      	orrs	r3, r2
         );
}
 800090a:	4618      	mov	r0, r3
 800090c:	3724      	adds	r7, #36	; 0x24
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000928:	d301      	bcc.n	800092e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800092a:	2301      	movs	r3, #1
 800092c:	e00f      	b.n	800094e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <SysTick_Config+0x40>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3b01      	subs	r3, #1
 8000934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000936:	210f      	movs	r1, #15
 8000938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800093c:	f7ff ff8e 	bl	800085c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <SysTick_Config+0x40>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000946:	4b04      	ldr	r3, [pc, #16]	; (8000958 <SysTick_Config+0x40>)
 8000948:	2207      	movs	r2, #7
 800094a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	e000e010 	.word	0xe000e010

0800095c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff ff29 	bl	80007bc <__NVIC_SetPriorityGrouping>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b086      	sub	sp, #24
 8000976:	af00      	add	r7, sp, #0
 8000978:	4603      	mov	r3, r0
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
 800097e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000984:	f7ff ff3e 	bl	8000804 <__NVIC_GetPriorityGrouping>
 8000988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	68b9      	ldr	r1, [r7, #8]
 800098e:	6978      	ldr	r0, [r7, #20]
 8000990:	f7ff ff8e 	bl	80008b0 <NVIC_EncodePriority>
 8000994:	4602      	mov	r2, r0
 8000996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ff5d 	bl	800085c <__NVIC_SetPriority>
}
 80009a2:	bf00      	nop
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	4603      	mov	r3, r0
 80009b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff31 	bl	8000820 <__NVIC_EnableIRQ>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff ffa2 	bl	8000918 <SysTick_Config>
 80009d4:	4603      	mov	r3, r0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d008      	beq.n	8000a02 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2204      	movs	r2, #4
 80009f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2200      	movs	r2, #0
 80009fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e020      	b.n	8000a44 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f022 020e 	bic.w	r2, r2, #14
 8000a10:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f022 0201 	bic.w	r2, r2, #1
 8000a20:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a30:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2201      	movs	r2, #1
 8000a36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d005      	beq.n	8000a72 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2204      	movs	r2, #4
 8000a6a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	73fb      	strb	r3, [r7, #15]
 8000a70:	e027      	b.n	8000ac2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f022 020e 	bic.w	r2, r2, #14
 8000a80:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f022 0201 	bic.w	r2, r2, #1
 8000a90:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	4798      	blx	r3
    } 
  }
  return status;
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b087      	sub	sp, #28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ada:	e154      	b.n	8000d86 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f000 8146 	beq.w	8000d80 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f003 0303 	and.w	r3, r3, #3
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d005      	beq.n	8000b0c <HAL_GPIO_Init+0x40>
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f003 0303 	and.w	r3, r3, #3
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d130      	bne.n	8000b6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	2203      	movs	r2, #3
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68da      	ldr	r2, [r3, #12]
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b42:	2201      	movs	r2, #1
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	091b      	lsrs	r3, r3, #4
 8000b58:	f003 0201 	and.w	r2, r3, #1
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f003 0303 	and.w	r3, r3, #3
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	d017      	beq.n	8000baa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	2203      	movs	r2, #3
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f003 0303 	and.w	r3, r3, #3
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d123      	bne.n	8000bfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	08da      	lsrs	r2, r3, #3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3208      	adds	r2, #8
 8000bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	220f      	movs	r2, #15
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	691a      	ldr	r2, [r3, #16]
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	f003 0307 	and.w	r3, r3, #7
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	08da      	lsrs	r2, r3, #3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3208      	adds	r2, #8
 8000bf8:	6939      	ldr	r1, [r7, #16]
 8000bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	2203      	movs	r2, #3
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 0203 	and.w	r2, r3, #3
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 80a0 	beq.w	8000d80 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c40:	4b58      	ldr	r3, [pc, #352]	; (8000da4 <HAL_GPIO_Init+0x2d8>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	4a57      	ldr	r2, [pc, #348]	; (8000da4 <HAL_GPIO_Init+0x2d8>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	6193      	str	r3, [r2, #24]
 8000c4c:	4b55      	ldr	r3, [pc, #340]	; (8000da4 <HAL_GPIO_Init+0x2d8>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c58:	4a53      	ldr	r2, [pc, #332]	; (8000da8 <HAL_GPIO_Init+0x2dc>)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	089b      	lsrs	r3, r3, #2
 8000c5e:	3302      	adds	r3, #2
 8000c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	220f      	movs	r2, #15
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c82:	d019      	beq.n	8000cb8 <HAL_GPIO_Init+0x1ec>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a49      	ldr	r2, [pc, #292]	; (8000dac <HAL_GPIO_Init+0x2e0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d013      	beq.n	8000cb4 <HAL_GPIO_Init+0x1e8>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a48      	ldr	r2, [pc, #288]	; (8000db0 <HAL_GPIO_Init+0x2e4>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d00d      	beq.n	8000cb0 <HAL_GPIO_Init+0x1e4>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a47      	ldr	r2, [pc, #284]	; (8000db4 <HAL_GPIO_Init+0x2e8>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d007      	beq.n	8000cac <HAL_GPIO_Init+0x1e0>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a46      	ldr	r2, [pc, #280]	; (8000db8 <HAL_GPIO_Init+0x2ec>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d101      	bne.n	8000ca8 <HAL_GPIO_Init+0x1dc>
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	e008      	b.n	8000cba <HAL_GPIO_Init+0x1ee>
 8000ca8:	2305      	movs	r3, #5
 8000caa:	e006      	b.n	8000cba <HAL_GPIO_Init+0x1ee>
 8000cac:	2303      	movs	r3, #3
 8000cae:	e004      	b.n	8000cba <HAL_GPIO_Init+0x1ee>
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	e002      	b.n	8000cba <HAL_GPIO_Init+0x1ee>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e000      	b.n	8000cba <HAL_GPIO_Init+0x1ee>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	f002 0203 	and.w	r2, r2, #3
 8000cc0:	0092      	lsls	r2, r2, #2
 8000cc2:	4093      	lsls	r3, r2
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cca:	4937      	ldr	r1, [pc, #220]	; (8000da8 <HAL_GPIO_Init+0x2dc>)
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	089b      	lsrs	r3, r3, #2
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cd8:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <HAL_GPIO_Init+0x2f0>)
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d003      	beq.n	8000cfc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cfc:	4a2f      	ldr	r2, [pc, #188]	; (8000dbc <HAL_GPIO_Init+0x2f0>)
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d02:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <HAL_GPIO_Init+0x2f0>)
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d26:	4a25      	ldr	r2, [pc, #148]	; (8000dbc <HAL_GPIO_Init+0x2f0>)
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d2c:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <HAL_GPIO_Init+0x2f0>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d50:	4a1a      	ldr	r2, [pc, #104]	; (8000dbc <HAL_GPIO_Init+0x2f0>)
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_GPIO_Init+0x2f0>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_GPIO_Init+0x2f0>)
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	3301      	adds	r3, #1
 8000d84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f47f aea3 	bne.w	8000adc <HAL_GPIO_Init+0x10>
  }
}
 8000d96:	bf00      	nop
 8000d98:	bf00      	nop
 8000d9a:	371c      	adds	r7, #28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40010000 	.word	0x40010000
 8000dac:	48000400 	.word	0x48000400
 8000db0:	48000800 	.word	0x48000800
 8000db4:	48000c00 	.word	0x48000c00
 8000db8:	48001000 	.word	0x48001000
 8000dbc:	40010400 	.word	0x40010400

08000dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	807b      	strh	r3, [r7, #2]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dd0:	787b      	ldrb	r3, [r7, #1]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dd6:	887a      	ldrh	r2, [r7, #2]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ddc:	e002      	b.n	8000de4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dde:	887a      	ldrh	r2, [r7, #2]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dfc:	695a      	ldr	r2, [r3, #20]
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	4013      	ands	r3, r2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d006      	beq.n	8000e14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff f9da 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40010400 	.word	0x40010400

08000e20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e30:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	f001 b823 	b.w	8001e8c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 817d 	beq.w	8001156 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e5c:	4bbc      	ldr	r3, [pc, #752]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 030c 	and.w	r3, r3, #12
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d00c      	beq.n	8000e82 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e68:	4bb9      	ldr	r3, [pc, #740]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 030c 	and.w	r3, r3, #12
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d15c      	bne.n	8000f2e <HAL_RCC_OscConfig+0x10e>
 8000e74:	4bb6      	ldr	r3, [pc, #728]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e80:	d155      	bne.n	8000f2e <HAL_RCC_OscConfig+0x10e>
 8000e82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e86:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e8e:	fa93 f3a3 	rbit	r3, r3
 8000e92:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e96:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9a:	fab3 f383 	clz	r3, r3
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	095b      	lsrs	r3, r3, #5
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d102      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x94>
 8000eae:	4ba8      	ldr	r3, [pc, #672]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	e015      	b.n	8000ee0 <HAL_RCC_OscConfig+0xc0>
 8000eb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eb8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000ec0:	fa93 f3a3 	rbit	r3, r3
 8000ec4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000ec8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ecc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ed0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ed4:	fa93 f3a3 	rbit	r3, r3
 8000ed8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000edc:	4b9c      	ldr	r3, [pc, #624]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ee4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000ee8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000eec:	fa92 f2a2 	rbit	r2, r2
 8000ef0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000ef4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000ef8:	fab2 f282 	clz	r2, r2
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	f042 0220 	orr.w	r2, r2, #32
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	f002 021f 	and.w	r2, r2, #31
 8000f08:	2101      	movs	r1, #1
 8000f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 811f 	beq.w	8001154 <HAL_RCC_OscConfig+0x334>
 8000f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f040 8116 	bne.w	8001154 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	f000 bfaf 	b.w	8001e8c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3e:	d106      	bne.n	8000f4e <HAL_RCC_OscConfig+0x12e>
 8000f40:	4b83      	ldr	r3, [pc, #524]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a82      	ldr	r2, [pc, #520]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4a:	6013      	str	r3, [r2, #0]
 8000f4c:	e036      	b.n	8000fbc <HAL_RCC_OscConfig+0x19c>
 8000f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10c      	bne.n	8000f78 <HAL_RCC_OscConfig+0x158>
 8000f5e:	4b7c      	ldr	r3, [pc, #496]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a7b      	ldr	r2, [pc, #492]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	4b79      	ldr	r3, [pc, #484]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a78      	ldr	r2, [pc, #480]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	e021      	b.n	8000fbc <HAL_RCC_OscConfig+0x19c>
 8000f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f88:	d10c      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x184>
 8000f8a:	4b71      	ldr	r3, [pc, #452]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a70      	ldr	r2, [pc, #448]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	4b6e      	ldr	r3, [pc, #440]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a6d      	ldr	r2, [pc, #436]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	e00b      	b.n	8000fbc <HAL_RCC_OscConfig+0x19c>
 8000fa4:	4b6a      	ldr	r3, [pc, #424]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a69      	ldr	r2, [pc, #420]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	4b67      	ldr	r3, [pc, #412]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a66      	ldr	r2, [pc, #408]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fbc:	4b64      	ldr	r3, [pc, #400]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc0:	f023 020f 	bic.w	r2, r3, #15
 8000fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	495f      	ldr	r1, [pc, #380]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d059      	beq.n	800109a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe6:	f7ff fbdd 	bl	80007a4 <HAL_GetTick>
 8000fea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fee:	e00a      	b.n	8001006 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff0:	f7ff fbd8 	bl	80007a4 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b64      	cmp	r3, #100	; 0x64
 8000ffe:	d902      	bls.n	8001006 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	f000 bf43 	b.w	8001e8c <HAL_RCC_OscConfig+0x106c>
 8001006:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800100a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001012:	fa93 f3a3 	rbit	r3, r3
 8001016:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800101a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101e:	fab3 f383 	clz	r3, r3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	095b      	lsrs	r3, r3, #5
 8001026:	b2db      	uxtb	r3, r3
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b01      	cmp	r3, #1
 8001030:	d102      	bne.n	8001038 <HAL_RCC_OscConfig+0x218>
 8001032:	4b47      	ldr	r3, [pc, #284]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	e015      	b.n	8001064 <HAL_RCC_OscConfig+0x244>
 8001038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800103c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001040:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001044:	fa93 f3a3 	rbit	r3, r3
 8001048:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800104c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001050:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001054:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001058:	fa93 f3a3 	rbit	r3, r3
 800105c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001060:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8001062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001064:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001068:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800106c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001070:	fa92 f2a2 	rbit	r2, r2
 8001074:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001078:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800107c:	fab2 f282 	clz	r2, r2
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	f042 0220 	orr.w	r2, r2, #32
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	f002 021f 	and.w	r2, r2, #31
 800108c:	2101      	movs	r1, #1
 800108e:	fa01 f202 	lsl.w	r2, r1, r2
 8001092:	4013      	ands	r3, r2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0ab      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x1d0>
 8001098:	e05d      	b.n	8001156 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109a:	f7ff fb83 	bl	80007a4 <HAL_GetTick>
 800109e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a2:	e00a      	b.n	80010ba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a4:	f7ff fb7e 	bl	80007a4 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b64      	cmp	r3, #100	; 0x64
 80010b2:	d902      	bls.n	80010ba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	f000 bee9 	b.w	8001e8c <HAL_RCC_OscConfig+0x106c>
 80010ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010be:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80010c6:	fa93 f3a3 	rbit	r3, r3
 80010ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80010ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d2:	fab3 f383 	clz	r3, r3
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	095b      	lsrs	r3, r3, #5
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d102      	bne.n	80010ec <HAL_RCC_OscConfig+0x2cc>
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	e015      	b.n	8001118 <HAL_RCC_OscConfig+0x2f8>
 80010ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80010f8:	fa93 f3a3 	rbit	r3, r3
 80010fc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001100:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001104:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001108:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800110c:	fa93 f3a3 	rbit	r3, r3
 8001110:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <HAL_RCC_OscConfig+0x330>)
 8001116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001118:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800111c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001120:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001124:	fa92 f2a2 	rbit	r2, r2
 8001128:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800112c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001130:	fab2 f282 	clz	r2, r2
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	f042 0220 	orr.w	r2, r2, #32
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	f002 021f 	and.w	r2, r2, #31
 8001140:	2101      	movs	r1, #1
 8001142:	fa01 f202 	lsl.w	r2, r1, r2
 8001146:	4013      	ands	r3, r2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1ab      	bne.n	80010a4 <HAL_RCC_OscConfig+0x284>
 800114c:	e003      	b.n	8001156 <HAL_RCC_OscConfig+0x336>
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 817d 	beq.w	8001466 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800116c:	4ba6      	ldr	r3, [pc, #664]	; (8001408 <HAL_RCC_OscConfig+0x5e8>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 030c 	and.w	r3, r3, #12
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00b      	beq.n	8001190 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001178:	4ba3      	ldr	r3, [pc, #652]	; (8001408 <HAL_RCC_OscConfig+0x5e8>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 030c 	and.w	r3, r3, #12
 8001180:	2b08      	cmp	r3, #8
 8001182:	d172      	bne.n	800126a <HAL_RCC_OscConfig+0x44a>
 8001184:	4ba0      	ldr	r3, [pc, #640]	; (8001408 <HAL_RCC_OscConfig+0x5e8>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d16c      	bne.n	800126a <HAL_RCC_OscConfig+0x44a>
 8001190:	2302      	movs	r3, #2
 8001192:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001196:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800119a:	fa93 f3a3 	rbit	r3, r3
 800119e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80011a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a6:	fab3 f383 	clz	r3, r3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	095b      	lsrs	r3, r3, #5
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d102      	bne.n	80011c0 <HAL_RCC_OscConfig+0x3a0>
 80011ba:	4b93      	ldr	r3, [pc, #588]	; (8001408 <HAL_RCC_OscConfig+0x5e8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	e013      	b.n	80011e8 <HAL_RCC_OscConfig+0x3c8>
 80011c0:	2302      	movs	r3, #2
 80011c2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80011ca:	fa93 f3a3 	rbit	r3, r3
 80011ce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80011d2:	2302      	movs	r3, #2
 80011d4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80011dc:	fa93 f3a3 	rbit	r3, r3
 80011e0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80011e4:	4b88      	ldr	r3, [pc, #544]	; (8001408 <HAL_RCC_OscConfig+0x5e8>)
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	2202      	movs	r2, #2
 80011ea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80011ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011f2:	fa92 f2a2 	rbit	r2, r2
 80011f6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80011fa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80011fe:	fab2 f282 	clz	r2, r2
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	f042 0220 	orr.w	r2, r2, #32
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	f002 021f 	and.w	r2, r2, #31
 800120e:	2101      	movs	r1, #1
 8001210:	fa01 f202 	lsl.w	r2, r1, r2
 8001214:	4013      	ands	r3, r2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d00a      	beq.n	8001230 <HAL_RCC_OscConfig+0x410>
 800121a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800121e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d002      	beq.n	8001230 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	f000 be2e 	b.w	8001e8c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001230:	4b75      	ldr	r3, [pc, #468]	; (8001408 <HAL_RCC_OscConfig+0x5e8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800123c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	21f8      	movs	r1, #248	; 0xf8
 8001246:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800124e:	fa91 f1a1 	rbit	r1, r1
 8001252:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001256:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800125a:	fab1 f181 	clz	r1, r1
 800125e:	b2c9      	uxtb	r1, r1
 8001260:	408b      	lsls	r3, r1
 8001262:	4969      	ldr	r1, [pc, #420]	; (8001408 <HAL_RCC_OscConfig+0x5e8>)
 8001264:	4313      	orrs	r3, r2
 8001266:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001268:	e0fd      	b.n	8001466 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800126a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800126e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8088 	beq.w	800138c <HAL_RCC_OscConfig+0x56c>
 800127c:	2301      	movs	r3, #1
 800127e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001286:	fa93 f3a3 	rbit	r3, r3
 800128a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800128e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001292:	fab3 f383 	clz	r3, r3
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800129c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	461a      	mov	r2, r3
 80012a4:	2301      	movs	r3, #1
 80012a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fa7c 	bl	80007a4 <HAL_GetTick>
 80012ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b0:	e00a      	b.n	80012c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b2:	f7ff fa77 	bl	80007a4 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d902      	bls.n	80012c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	f000 bde2 	b.w	8001e8c <HAL_RCC_OscConfig+0x106c>
 80012c8:	2302      	movs	r3, #2
 80012ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80012d2:	fa93 f3a3 	rbit	r3, r3
 80012d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80012da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012de:	fab3 f383 	clz	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	095b      	lsrs	r3, r3, #5
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d102      	bne.n	80012f8 <HAL_RCC_OscConfig+0x4d8>
 80012f2:	4b45      	ldr	r3, [pc, #276]	; (8001408 <HAL_RCC_OscConfig+0x5e8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	e013      	b.n	8001320 <HAL_RCC_OscConfig+0x500>
 80012f8:	2302      	movs	r3, #2
 80012fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001302:	fa93 f3a3 	rbit	r3, r3
 8001306:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800130a:	2302      	movs	r3, #2
 800130c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001310:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001314:	fa93 f3a3 	rbit	r3, r3
 8001318:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800131c:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <HAL_RCC_OscConfig+0x5e8>)
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	2202      	movs	r2, #2
 8001322:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001326:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800132a:	fa92 f2a2 	rbit	r2, r2
 800132e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001332:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001336:	fab2 f282 	clz	r2, r2
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	f042 0220 	orr.w	r2, r2, #32
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	f002 021f 	and.w	r2, r2, #31
 8001346:	2101      	movs	r1, #1
 8001348:	fa01 f202 	lsl.w	r2, r1, r2
 800134c:	4013      	ands	r3, r2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0af      	beq.n	80012b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001352:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <HAL_RCC_OscConfig+0x5e8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800135e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	21f8      	movs	r1, #248	; 0xf8
 8001368:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001370:	fa91 f1a1 	rbit	r1, r1
 8001374:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001378:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800137c:	fab1 f181 	clz	r1, r1
 8001380:	b2c9      	uxtb	r1, r1
 8001382:	408b      	lsls	r3, r1
 8001384:	4920      	ldr	r1, [pc, #128]	; (8001408 <HAL_RCC_OscConfig+0x5e8>)
 8001386:	4313      	orrs	r3, r2
 8001388:	600b      	str	r3, [r1, #0]
 800138a:	e06c      	b.n	8001466 <HAL_RCC_OscConfig+0x646>
 800138c:	2301      	movs	r3, #1
 800138e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001392:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001396:	fa93 f3a3 	rbit	r3, r3
 800139a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800139e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a2:	fab3 f383 	clz	r3, r3
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	461a      	mov	r2, r3
 80013b4:	2300      	movs	r3, #0
 80013b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b8:	f7ff f9f4 	bl	80007a4 <HAL_GetTick>
 80013bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c0:	e00a      	b.n	80013d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c2:	f7ff f9ef 	bl	80007a4 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d902      	bls.n	80013d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	f000 bd5a 	b.w	8001e8c <HAL_RCC_OscConfig+0x106c>
 80013d8:	2302      	movs	r3, #2
 80013da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80013e2:	fa93 f3a3 	rbit	r3, r3
 80013e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80013ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	fab3 f383 	clz	r3, r3
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	095b      	lsrs	r3, r3, #5
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d104      	bne.n	800140c <HAL_RCC_OscConfig+0x5ec>
 8001402:	4b01      	ldr	r3, [pc, #4]	; (8001408 <HAL_RCC_OscConfig+0x5e8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	e015      	b.n	8001434 <HAL_RCC_OscConfig+0x614>
 8001408:	40021000 	.word	0x40021000
 800140c:	2302      	movs	r3, #2
 800140e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001412:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001416:	fa93 f3a3 	rbit	r3, r3
 800141a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800141e:	2302      	movs	r3, #2
 8001420:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001424:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001428:	fa93 f3a3 	rbit	r3, r3
 800142c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001430:	4bc8      	ldr	r3, [pc, #800]	; (8001754 <HAL_RCC_OscConfig+0x934>)
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	2202      	movs	r2, #2
 8001436:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800143a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800143e:	fa92 f2a2 	rbit	r2, r2
 8001442:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001446:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800144a:	fab2 f282 	clz	r2, r2
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	f042 0220 	orr.w	r2, r2, #32
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	f002 021f 	and.w	r2, r2, #31
 800145a:	2101      	movs	r1, #1
 800145c:	fa01 f202 	lsl.w	r2, r1, r2
 8001460:	4013      	ands	r3, r2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1ad      	bne.n	80013c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 8110 	beq.w	800169c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800147c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001480:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d079      	beq.n	8001580 <HAL_RCC_OscConfig+0x760>
 800148c:	2301      	movs	r3, #1
 800148e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001492:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001496:	fa93 f3a3 	rbit	r3, r3
 800149a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800149e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014a2:	fab3 f383 	clz	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	4bab      	ldr	r3, [pc, #684]	; (8001758 <HAL_RCC_OscConfig+0x938>)
 80014ac:	4413      	add	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	461a      	mov	r2, r3
 80014b2:	2301      	movs	r3, #1
 80014b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b6:	f7ff f975 	bl	80007a4 <HAL_GetTick>
 80014ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014be:	e00a      	b.n	80014d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c0:	f7ff f970 	bl	80007a4 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d902      	bls.n	80014d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	f000 bcdb 	b.w	8001e8c <HAL_RCC_OscConfig+0x106c>
 80014d6:	2302      	movs	r3, #2
 80014d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80014e0:	fa93 f3a3 	rbit	r3, r3
 80014e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014f0:	2202      	movs	r2, #2
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	fa93 f2a3 	rbit	r2, r3
 8001502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001506:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001514:	2202      	movs	r2, #2
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	fa93 f2a3 	rbit	r2, r3
 8001526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800152e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001530:	4b88      	ldr	r3, [pc, #544]	; (8001754 <HAL_RCC_OscConfig+0x934>)
 8001532:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001538:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800153c:	2102      	movs	r1, #2
 800153e:	6019      	str	r1, [r3, #0]
 8001540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001544:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	fa93 f1a3 	rbit	r1, r3
 800154e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001552:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001556:	6019      	str	r1, [r3, #0]
  return result;
 8001558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	fab3 f383 	clz	r3, r3
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800156c:	b2db      	uxtb	r3, r3
 800156e:	f003 031f 	and.w	r3, r3, #31
 8001572:	2101      	movs	r1, #1
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	4013      	ands	r3, r2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0a0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x6a0>
 800157e:	e08d      	b.n	800169c <HAL_RCC_OscConfig+0x87c>
 8001580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001584:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001588:	2201      	movs	r2, #1
 800158a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001590:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	fa93 f2a3 	rbit	r2, r3
 800159a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015a2:	601a      	str	r2, [r3, #0]
  return result;
 80015a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ae:	fab3 f383 	clz	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b68      	ldr	r3, [pc, #416]	; (8001758 <HAL_RCC_OscConfig+0x938>)
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	461a      	mov	r2, r3
 80015be:	2300      	movs	r3, #0
 80015c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c2:	f7ff f8ef 	bl	80007a4 <HAL_GetTick>
 80015c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ca:	e00a      	b.n	80015e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015cc:	f7ff f8ea 	bl	80007a4 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d902      	bls.n	80015e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	f000 bc55 	b.w	8001e8c <HAL_RCC_OscConfig+0x106c>
 80015e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015ea:	2202      	movs	r2, #2
 80015ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	fa93 f2a3 	rbit	r2, r3
 80015fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001600:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800160e:	2202      	movs	r2, #2
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001616:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	fa93 f2a3 	rbit	r2, r3
 8001620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001624:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001632:	2202      	movs	r2, #2
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	fa93 f2a3 	rbit	r2, r3
 8001644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001648:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800164c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164e:	4b41      	ldr	r3, [pc, #260]	; (8001754 <HAL_RCC_OscConfig+0x934>)
 8001650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001656:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800165a:	2102      	movs	r1, #2
 800165c:	6019      	str	r1, [r3, #0]
 800165e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001662:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	fa93 f1a3 	rbit	r1, r3
 800166c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001670:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001674:	6019      	str	r1, [r3, #0]
  return result;
 8001676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	fab3 f383 	clz	r3, r3
 8001684:	b2db      	uxtb	r3, r3
 8001686:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800168a:	b2db      	uxtb	r3, r3
 800168c:	f003 031f 	and.w	r3, r3, #31
 8001690:	2101      	movs	r1, #1
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	4013      	ands	r3, r2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d197      	bne.n	80015cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 81a1 	beq.w	80019f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016b8:	4b26      	ldr	r3, [pc, #152]	; (8001754 <HAL_RCC_OscConfig+0x934>)
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d116      	bne.n	80016f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c4:	4b23      	ldr	r3, [pc, #140]	; (8001754 <HAL_RCC_OscConfig+0x934>)
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	4a22      	ldr	r2, [pc, #136]	; (8001754 <HAL_RCC_OscConfig+0x934>)
 80016ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ce:	61d3      	str	r3, [r2, #28]
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <HAL_RCC_OscConfig+0x934>)
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016dc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80016ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016ec:	2301      	movs	r3, #1
 80016ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <HAL_RCC_OscConfig+0x93c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d11a      	bne.n	8001734 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <HAL_RCC_OscConfig+0x93c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a16      	ldr	r2, [pc, #88]	; (800175c <HAL_RCC_OscConfig+0x93c>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170a:	f7ff f84b 	bl	80007a4 <HAL_GetTick>
 800170e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001712:	e009      	b.n	8001728 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001714:	f7ff f846 	bl	80007a4 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b64      	cmp	r3, #100	; 0x64
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e3b1      	b.n	8001e8c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_RCC_OscConfig+0x93c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0ef      	beq.n	8001714 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001738:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d10d      	bne.n	8001760 <HAL_RCC_OscConfig+0x940>
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <HAL_RCC_OscConfig+0x934>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4a02      	ldr	r2, [pc, #8]	; (8001754 <HAL_RCC_OscConfig+0x934>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6213      	str	r3, [r2, #32]
 8001750:	e03c      	b.n	80017cc <HAL_RCC_OscConfig+0x9ac>
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	10908120 	.word	0x10908120
 800175c:	40007000 	.word	0x40007000
 8001760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001764:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10c      	bne.n	800178a <HAL_RCC_OscConfig+0x96a>
 8001770:	4bc1      	ldr	r3, [pc, #772]	; (8001a78 <HAL_RCC_OscConfig+0xc58>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4ac0      	ldr	r2, [pc, #768]	; (8001a78 <HAL_RCC_OscConfig+0xc58>)
 8001776:	f023 0301 	bic.w	r3, r3, #1
 800177a:	6213      	str	r3, [r2, #32]
 800177c:	4bbe      	ldr	r3, [pc, #760]	; (8001a78 <HAL_RCC_OscConfig+0xc58>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	4abd      	ldr	r2, [pc, #756]	; (8001a78 <HAL_RCC_OscConfig+0xc58>)
 8001782:	f023 0304 	bic.w	r3, r3, #4
 8001786:	6213      	str	r3, [r2, #32]
 8001788:	e020      	b.n	80017cc <HAL_RCC_OscConfig+0x9ac>
 800178a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	2b05      	cmp	r3, #5
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x994>
 800179a:	4bb7      	ldr	r3, [pc, #732]	; (8001a78 <HAL_RCC_OscConfig+0xc58>)
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	4ab6      	ldr	r2, [pc, #728]	; (8001a78 <HAL_RCC_OscConfig+0xc58>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	6213      	str	r3, [r2, #32]
 80017a6:	4bb4      	ldr	r3, [pc, #720]	; (8001a78 <HAL_RCC_OscConfig+0xc58>)
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	4ab3      	ldr	r2, [pc, #716]	; (8001a78 <HAL_RCC_OscConfig+0xc58>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6213      	str	r3, [r2, #32]
 80017b2:	e00b      	b.n	80017cc <HAL_RCC_OscConfig+0x9ac>
 80017b4:	4bb0      	ldr	r3, [pc, #704]	; (8001a78 <HAL_RCC_OscConfig+0xc58>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4aaf      	ldr	r2, [pc, #700]	; (8001a78 <HAL_RCC_OscConfig+0xc58>)
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	6213      	str	r3, [r2, #32]
 80017c0:	4bad      	ldr	r3, [pc, #692]	; (8001a78 <HAL_RCC_OscConfig+0xc58>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	4aac      	ldr	r2, [pc, #688]	; (8001a78 <HAL_RCC_OscConfig+0xc58>)
 80017c6:	f023 0304 	bic.w	r3, r3, #4
 80017ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 8081 	beq.w	80018e0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7fe ffe1 	bl	80007a4 <HAL_GetTick>
 80017e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e6:	e00b      	b.n	8001800 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e8:	f7fe ffdc 	bl	80007a4 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e345      	b.n	8001e8c <HAL_RCC_OscConfig+0x106c>
 8001800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001804:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001808:	2202      	movs	r2, #2
 800180a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001810:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	fa93 f2a3 	rbit	r2, r3
 800181a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001828:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800182c:	2202      	movs	r2, #2
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001834:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	fa93 f2a3 	rbit	r2, r3
 800183e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001842:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001846:	601a      	str	r2, [r3, #0]
  return result;
 8001848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001850:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001852:	fab3 f383 	clz	r3, r3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	095b      	lsrs	r3, r3, #5
 800185a:	b2db      	uxtb	r3, r3
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d102      	bne.n	800186c <HAL_RCC_OscConfig+0xa4c>
 8001866:	4b84      	ldr	r3, [pc, #528]	; (8001a78 <HAL_RCC_OscConfig+0xc58>)
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	e013      	b.n	8001894 <HAL_RCC_OscConfig+0xa74>
 800186c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001870:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001874:	2202      	movs	r2, #2
 8001876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	fa93 f2a3 	rbit	r2, r3
 8001886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	4b79      	ldr	r3, [pc, #484]	; (8001a78 <HAL_RCC_OscConfig+0xc58>)
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001898:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800189c:	2102      	movs	r1, #2
 800189e:	6011      	str	r1, [r2, #0]
 80018a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018a4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	fa92 f1a2 	rbit	r1, r2
 80018ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018b2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018b6:	6011      	str	r1, [r2, #0]
  return result;
 80018b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018bc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	fab2 f282 	clz	r2, r2
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	f002 021f 	and.w	r2, r2, #31
 80018d2:	2101      	movs	r1, #1
 80018d4:	fa01 f202 	lsl.w	r2, r1, r2
 80018d8:	4013      	ands	r3, r2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d084      	beq.n	80017e8 <HAL_RCC_OscConfig+0x9c8>
 80018de:	e07f      	b.n	80019e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e0:	f7fe ff60 	bl	80007a4 <HAL_GetTick>
 80018e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e8:	e00b      	b.n	8001902 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ea:	f7fe ff5b 	bl	80007a4 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e2c4      	b.n	8001e8c <HAL_RCC_OscConfig+0x106c>
 8001902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001906:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800190a:	2202      	movs	r2, #2
 800190c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001912:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	fa93 f2a3 	rbit	r2, r3
 800191c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001920:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800192e:	2202      	movs	r2, #2
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001936:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	fa93 f2a3 	rbit	r2, r3
 8001940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001944:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001948:	601a      	str	r2, [r3, #0]
  return result;
 800194a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001952:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	b2db      	uxtb	r3, r3
 800195e:	f043 0302 	orr.w	r3, r3, #2
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d102      	bne.n	800196e <HAL_RCC_OscConfig+0xb4e>
 8001968:	4b43      	ldr	r3, [pc, #268]	; (8001a78 <HAL_RCC_OscConfig+0xc58>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	e013      	b.n	8001996 <HAL_RCC_OscConfig+0xb76>
 800196e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001972:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001976:	2202      	movs	r2, #2
 8001978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	fa93 f2a3 	rbit	r2, r3
 8001988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	4b39      	ldr	r3, [pc, #228]	; (8001a78 <HAL_RCC_OscConfig+0xc58>)
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800199a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800199e:	2102      	movs	r1, #2
 80019a0:	6011      	str	r1, [r2, #0]
 80019a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	fa92 f1a2 	rbit	r1, r2
 80019b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019b8:	6011      	str	r1, [r2, #0]
  return result;
 80019ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019be:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	fab2 f282 	clz	r2, r2
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	f002 021f 	and.w	r2, r2, #31
 80019d4:	2101      	movs	r1, #1
 80019d6:	fa01 f202 	lsl.w	r2, r1, r2
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d184      	bne.n	80018ea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d105      	bne.n	80019f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e8:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <HAL_RCC_OscConfig+0xc58>)
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	4a22      	ldr	r2, [pc, #136]	; (8001a78 <HAL_RCC_OscConfig+0xc58>)
 80019ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 8242 	beq.w	8001e8a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a06:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <HAL_RCC_OscConfig+0xc58>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	f000 8213 	beq.w	8001e3a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	f040 8162 	bne.w	8001cea <HAL_RCC_OscConfig+0xeca>
 8001a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a38:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	fa93 f2a3 	rbit	r2, r3
 8001a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a46:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a4a:	601a      	str	r2, [r3, #0]
  return result;
 8001a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a50:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a54:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a56:	fab3 f383 	clz	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	461a      	mov	r2, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7fe fe9a 	bl	80007a4 <HAL_GetTick>
 8001a70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a74:	e00c      	b.n	8001a90 <HAL_RCC_OscConfig+0xc70>
 8001a76:	bf00      	nop
 8001a78:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7fe fe92 	bl	80007a4 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e1fd      	b.n	8001e8c <HAL_RCC_OscConfig+0x106c>
 8001a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a94:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	fa93 f2a3 	rbit	r2, r3
 8001aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ab4:	601a      	str	r2, [r3, #0]
  return result;
 8001ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001abe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac0:	fab3 f383 	clz	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	095b      	lsrs	r3, r3, #5
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d102      	bne.n	8001ada <HAL_RCC_OscConfig+0xcba>
 8001ad4:	4bb0      	ldr	r3, [pc, #704]	; (8001d98 <HAL_RCC_OscConfig+0xf78>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	e027      	b.n	8001b2a <HAL_RCC_OscConfig+0xd0a>
 8001ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ade:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ae2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	fa93 f2a3 	rbit	r2, r3
 8001af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b04:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b12:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	fa93 f2a3 	rbit	r2, r3
 8001b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b20:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	4b9c      	ldr	r3, [pc, #624]	; (8001d98 <HAL_RCC_OscConfig+0xf78>)
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b2e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b32:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b36:	6011      	str	r1, [r2, #0]
 8001b38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b3c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	fa92 f1a2 	rbit	r1, r2
 8001b46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b4a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b4e:	6011      	str	r1, [r2, #0]
  return result;
 8001b50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b54:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	fab2 f282 	clz	r2, r2
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	f042 0220 	orr.w	r2, r2, #32
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	f002 021f 	and.w	r2, r2, #31
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d182      	bne.n	8001a7c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b76:	4b88      	ldr	r3, [pc, #544]	; (8001d98 <HAL_RCC_OscConfig+0xf78>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	430b      	orrs	r3, r1
 8001b98:	497f      	ldr	r1, [pc, #508]	; (8001d98 <HAL_RCC_OscConfig+0xf78>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	604b      	str	r3, [r1, #4]
 8001b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ba6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	fa93 f2a3 	rbit	r2, r3
 8001bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001bc2:	601a      	str	r2, [r3, #0]
  return result;
 8001bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001bcc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bce:	fab3 f383 	clz	r3, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	461a      	mov	r2, r3
 8001be0:	2301      	movs	r3, #1
 8001be2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7fe fdde 	bl	80007a4 <HAL_GetTick>
 8001be8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bec:	e009      	b.n	8001c02 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bee:	f7fe fdd9 	bl	80007a4 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e144      	b.n	8001e8c <HAL_RCC_OscConfig+0x106c>
 8001c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c06:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c14:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	fa93 f2a3 	rbit	r2, r3
 8001c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c22:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c26:	601a      	str	r2, [r3, #0]
  return result;
 8001c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d102      	bne.n	8001c4c <HAL_RCC_OscConfig+0xe2c>
 8001c46:	4b54      	ldr	r3, [pc, #336]	; (8001d98 <HAL_RCC_OscConfig+0xf78>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	e027      	b.n	8001c9c <HAL_RCC_OscConfig+0xe7c>
 8001c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c50:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	fa93 f2a3 	rbit	r2, r3
 8001c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c76:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c84:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	fa93 f2a3 	rbit	r2, r3
 8001c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c92:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	4b3f      	ldr	r3, [pc, #252]	; (8001d98 <HAL_RCC_OscConfig+0xf78>)
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ca0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ca4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ca8:	6011      	str	r1, [r2, #0]
 8001caa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	fa92 f1a2 	rbit	r1, r2
 8001cb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cbc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001cc0:	6011      	str	r1, [r2, #0]
  return result;
 8001cc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cc6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	fab2 f282 	clz	r2, r2
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	f042 0220 	orr.w	r2, r2, #32
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	f002 021f 	and.w	r2, r2, #31
 8001cdc:	2101      	movs	r1, #1
 8001cde:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d082      	beq.n	8001bee <HAL_RCC_OscConfig+0xdce>
 8001ce8:	e0cf      	b.n	8001e8a <HAL_RCC_OscConfig+0x106a>
 8001cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001cf2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	fa93 f2a3 	rbit	r2, r3
 8001d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d0e:	601a      	str	r2, [r3, #0]
  return result;
 8001d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d14:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7fe fd38 	bl	80007a4 <HAL_GetTick>
 8001d34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d38:	e009      	b.n	8001d4e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3a:	f7fe fd33 	bl	80007a4 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e09e      	b.n	8001e8c <HAL_RCC_OscConfig+0x106c>
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d60:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	fa93 f2a3 	rbit	r2, r3
 8001d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d72:	601a      	str	r2, [r3, #0]
  return result;
 8001d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d78:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	095b      	lsrs	r3, r3, #5
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d104      	bne.n	8001d9c <HAL_RCC_OscConfig+0xf7c>
 8001d92:	4b01      	ldr	r3, [pc, #4]	; (8001d98 <HAL_RCC_OscConfig+0xf78>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	e029      	b.n	8001dec <HAL_RCC_OscConfig+0xfcc>
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001da4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	fa93 f2a3 	rbit	r2, r3
 8001db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001dca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	fa93 f2a3 	rbit	r2, r3
 8001dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <HAL_RCC_OscConfig+0x1078>)
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001df0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001df4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001df8:	6011      	str	r1, [r2, #0]
 8001dfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dfe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	fa92 f1a2 	rbit	r1, r2
 8001e08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e0c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e10:	6011      	str	r1, [r2, #0]
  return result;
 8001e12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e16:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	fab2 f282 	clz	r2, r2
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	f042 0220 	orr.w	r2, r2, #32
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	f002 021f 	and.w	r2, r2, #31
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d180      	bne.n	8001d3a <HAL_RCC_OscConfig+0xf1a>
 8001e38:	e027      	b.n	8001e8a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e01e      	b.n	8001e8c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_RCC_OscConfig+0x1078>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e5a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d10b      	bne.n	8001e86 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d001      	beq.n	8001e8a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000

08001e9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b09e      	sub	sp, #120	; 0x78
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e162      	b.n	800217a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb4:	4b90      	ldr	r3, [pc, #576]	; (80020f8 <HAL_RCC_ClockConfig+0x25c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d910      	bls.n	8001ee4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec2:	4b8d      	ldr	r3, [pc, #564]	; (80020f8 <HAL_RCC_ClockConfig+0x25c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 0207 	bic.w	r2, r3, #7
 8001eca:	498b      	ldr	r1, [pc, #556]	; (80020f8 <HAL_RCC_ClockConfig+0x25c>)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b89      	ldr	r3, [pc, #548]	; (80020f8 <HAL_RCC_ClockConfig+0x25c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e14a      	b.n	800217a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef0:	4b82      	ldr	r3, [pc, #520]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	497f      	ldr	r1, [pc, #508]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 80dc 	beq.w	80020c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d13c      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xf6>
 8001f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f1c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f28:	fab3 f383 	clz	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d102      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xa6>
 8001f3c:	4b6f      	ldr	r3, [pc, #444]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	e00f      	b.n	8001f62 <HAL_RCC_ClockConfig+0xc6>
 8001f42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	667b      	str	r3, [r7, #100]	; 0x64
 8001f50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f54:	663b      	str	r3, [r7, #96]	; 0x60
 8001f56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f5e:	4b67      	ldr	r3, [pc, #412]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f66:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f6a:	fa92 f2a2 	rbit	r2, r2
 8001f6e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f72:	fab2 f282 	clz	r2, r2
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	f042 0220 	orr.w	r2, r2, #32
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	f002 021f 	and.w	r2, r2, #31
 8001f82:	2101      	movs	r1, #1
 8001f84:	fa01 f202 	lsl.w	r2, r1, r2
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d17b      	bne.n	8002086 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e0f3      	b.n	800217a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d13c      	bne.n	8002014 <HAL_RCC_ClockConfig+0x178>
 8001f9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	095b      	lsrs	r3, r3, #5
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d102      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x128>
 8001fbe:	4b4f      	ldr	r3, [pc, #316]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	e00f      	b.n	8001fe4 <HAL_RCC_ClockConfig+0x148>
 8001fc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8001fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8001fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fe0:	4b46      	ldr	r3, [pc, #280]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fe8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001fea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fec:	fa92 f2a2 	rbit	r2, r2
 8001ff0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ff4:	fab2 f282 	clz	r2, r2
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	f042 0220 	orr.w	r2, r2, #32
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	f002 021f 	and.w	r2, r2, #31
 8002004:	2101      	movs	r1, #1
 8002006:	fa01 f202 	lsl.w	r2, r1, r2
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d13a      	bne.n	8002086 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0b2      	b.n	800217a <HAL_RCC_ClockConfig+0x2de>
 8002014:	2302      	movs	r3, #2
 8002016:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	095b      	lsrs	r3, r3, #5
 800202a:	b2db      	uxtb	r3, r3
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b01      	cmp	r3, #1
 8002034:	d102      	bne.n	800203c <HAL_RCC_ClockConfig+0x1a0>
 8002036:	4b31      	ldr	r3, [pc, #196]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	e00d      	b.n	8002058 <HAL_RCC_ClockConfig+0x1bc>
 800203c:	2302      	movs	r3, #2
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002042:	fa93 f3a3 	rbit	r3, r3
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
 8002048:	2302      	movs	r3, #2
 800204a:	623b      	str	r3, [r7, #32]
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	61fb      	str	r3, [r7, #28]
 8002054:	4b29      	ldr	r3, [pc, #164]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	2202      	movs	r2, #2
 800205a:	61ba      	str	r2, [r7, #24]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	fa92 f2a2 	rbit	r2, r2
 8002062:	617a      	str	r2, [r7, #20]
  return result;
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	fab2 f282 	clz	r2, r2
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	f042 0220 	orr.w	r2, r2, #32
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	f002 021f 	and.w	r2, r2, #31
 8002076:	2101      	movs	r1, #1
 8002078:	fa01 f202 	lsl.w	r2, r1, r2
 800207c:	4013      	ands	r3, r2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e079      	b.n	800217a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002086:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f023 0203 	bic.w	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	491a      	ldr	r1, [pc, #104]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 8002094:	4313      	orrs	r3, r2
 8002096:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002098:	f7fe fb84 	bl	80007a4 <HAL_GetTick>
 800209c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a0:	f7fe fb80 	bl	80007a4 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e061      	b.n	800217a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 020c 	and.w	r2, r3, #12
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d1eb      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCC_ClockConfig+0x25c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d214      	bcs.n	8002100 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <HAL_RCC_ClockConfig+0x25c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 0207 	bic.w	r2, r3, #7
 80020de:	4906      	ldr	r1, [pc, #24]	; (80020f8 <HAL_RCC_ClockConfig+0x25c>)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <HAL_RCC_ClockConfig+0x25c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e040      	b.n	800217a <HAL_RCC_ClockConfig+0x2de>
 80020f8:	40022000 	.word	0x40022000
 80020fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800210c:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_RCC_ClockConfig+0x2e8>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	491a      	ldr	r1, [pc, #104]	; (8002184 <HAL_RCC_ClockConfig+0x2e8>)
 800211a:	4313      	orrs	r3, r2
 800211c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d009      	beq.n	800213e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800212a:	4b16      	ldr	r3, [pc, #88]	; (8002184 <HAL_RCC_ClockConfig+0x2e8>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4912      	ldr	r1, [pc, #72]	; (8002184 <HAL_RCC_ClockConfig+0x2e8>)
 800213a:	4313      	orrs	r3, r2
 800213c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800213e:	f000 f85b 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 8002142:	4601      	mov	r1, r0
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <HAL_RCC_ClockConfig+0x2e8>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800214c:	22f0      	movs	r2, #240	; 0xf0
 800214e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	fa92 f2a2 	rbit	r2, r2
 8002156:	60fa      	str	r2, [r7, #12]
  return result;
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	fab2 f282 	clz	r2, r2
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	40d3      	lsrs	r3, r2
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <HAL_RCC_ClockConfig+0x2ec>)
 8002164:	5cd3      	ldrb	r3, [r2, r3]
 8002166:	fa21 f303 	lsr.w	r3, r1, r3
 800216a:	4a08      	ldr	r2, [pc, #32]	; (800218c <HAL_RCC_ClockConfig+0x2f0>)
 800216c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <HAL_RCC_ClockConfig+0x2f4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fad2 	bl	800071c <HAL_InitTick>
  
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3778      	adds	r7, #120	; 0x78
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	08003880 	.word	0x08003880
 800218c:	20000000 	.word	0x20000000
 8002190:	20000004 	.word	0x20000004

08002194 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80021a4:	2303      	movs	r3, #3
 80021a6:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 80021ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b0:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80021b6:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <HAL_RCC_MCOConfig+0x60>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <HAL_RCC_MCOConfig+0x60>)
 80021bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c0:	6153      	str	r3, [r2, #20]
 80021c2:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <HAL_RCC_MCOConfig+0x60>)
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	4619      	mov	r1, r3
 80021d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d8:	f7fe fc78 	bl	8000acc <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_RCC_MCOConfig+0x60>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80021e4:	4903      	ldr	r1, [pc, #12]	; (80021f4 <HAL_RCC_MCOConfig+0x60>)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
}
 80021ec:	bf00      	nop
 80021ee:	3728      	adds	r7, #40	; 0x28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40021000 	.word	0x40021000

080021f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b08b      	sub	sp, #44	; 0x2c
 80021fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	2300      	movs	r3, #0
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002212:	4b29      	ldr	r3, [pc, #164]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b04      	cmp	r3, #4
 8002220:	d002      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x30>
 8002222:	2b08      	cmp	r3, #8
 8002224:	d003      	beq.n	800222e <HAL_RCC_GetSysClockFreq+0x36>
 8002226:	e03c      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002228:	4b24      	ldr	r3, [pc, #144]	; (80022bc <HAL_RCC_GetSysClockFreq+0xc4>)
 800222a:	623b      	str	r3, [r7, #32]
      break;
 800222c:	e03c      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002234:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002238:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	fa92 f2a2 	rbit	r2, r2
 8002240:	607a      	str	r2, [r7, #4]
  return result;
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	fab2 f282 	clz	r2, r2
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	40d3      	lsrs	r3, r2
 800224c:	4a1c      	ldr	r2, [pc, #112]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800224e:	5cd3      	ldrb	r3, [r2, r3]
 8002250:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002252:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	220f      	movs	r2, #15
 800225c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	fa92 f2a2 	rbit	r2, r2
 8002264:	60fa      	str	r2, [r7, #12]
  return result;
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	fab2 f282 	clz	r2, r2
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	40d3      	lsrs	r3, r2
 8002270:	4a14      	ldr	r2, [pc, #80]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d008      	beq.n	8002292 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002280:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	fbb2 f2f3 	udiv	r2, r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fb02 f303 	mul.w	r3, r2, r3
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
 8002290:	e004      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	4a0c      	ldr	r2, [pc, #48]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	623b      	str	r3, [r7, #32]
      break;
 80022a0:	e002      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_RCC_GetSysClockFreq+0xc4>)
 80022a4:	623b      	str	r3, [r7, #32]
      break;
 80022a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022a8:	6a3b      	ldr	r3, [r7, #32]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	372c      	adds	r7, #44	; 0x2c
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
 80022bc:	007a1200 	.word	0x007a1200
 80022c0:	08003898 	.word	0x08003898
 80022c4:	080038a8 	.word	0x080038a8
 80022c8:	003d0900 	.word	0x003d0900

080022cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d0:	4b03      	ldr	r3, [pc, #12]	; (80022e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20000000 	.word	0x20000000

080022e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022ea:	f7ff ffef 	bl	80022cc <HAL_RCC_GetHCLKFreq>
 80022ee:	4601      	mov	r1, r0
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022f8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	fa92 f2a2 	rbit	r2, r2
 8002304:	603a      	str	r2, [r7, #0]
  return result;
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	fab2 f282 	clz	r2, r2
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	40d3      	lsrs	r3, r2
 8002310:	4a04      	ldr	r2, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002312:	5cd3      	ldrb	r3, [r2, r3]
 8002314:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	08003890 	.word	0x08003890

08002328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800232e:	f7ff ffcd 	bl	80022cc <HAL_RCC_GetHCLKFreq>
 8002332:	4601      	mov	r1, r0
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800233c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002340:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	fa92 f2a2 	rbit	r2, r2
 8002348:	603a      	str	r2, [r7, #0]
  return result;
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	fab2 f282 	clz	r2, r2
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	40d3      	lsrs	r3, r2
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002356:	5cd3      	ldrb	r3, [r2, r3]
 8002358:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000
 8002368:	08003890 	.word	0x08003890

0800236c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b092      	sub	sp, #72	; 0x48
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800237c:	2300      	movs	r3, #0
 800237e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 80d4 	beq.w	8002538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002390:	4b4e      	ldr	r3, [pc, #312]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10e      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239c:	4b4b      	ldr	r3, [pc, #300]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	4a4a      	ldr	r2, [pc, #296]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a6:	61d3      	str	r3, [r2, #28]
 80023a8:	4b48      	ldr	r3, [pc, #288]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b4:	2301      	movs	r3, #1
 80023b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ba:	4b45      	ldr	r3, [pc, #276]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d118      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c6:	4b42      	ldr	r3, [pc, #264]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a41      	ldr	r2, [pc, #260]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d2:	f7fe f9e7 	bl	80007a4 <HAL_GetTick>
 80023d6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d8:	e008      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023da:	f7fe f9e3 	bl	80007a4 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b64      	cmp	r3, #100	; 0x64
 80023e6:	d901      	bls.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e169      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ec:	4b38      	ldr	r3, [pc, #224]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023f8:	4b34      	ldr	r3, [pc, #208]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002400:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 8084 	beq.w	8002512 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002412:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002414:	429a      	cmp	r2, r3
 8002416:	d07c      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002418:	4b2c      	ldr	r3, [pc, #176]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242a:	fa93 f3a3 	rbit	r3, r3
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	461a      	mov	r2, r3
 8002442:	2301      	movs	r3, #1
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800244a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002456:	fab3 f383 	clz	r3, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	4b1d      	ldr	r3, [pc, #116]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	461a      	mov	r2, r3
 8002466:	2300      	movs	r3, #0
 8002468:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800246a:	4a18      	ldr	r2, [pc, #96]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800246e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d04b      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247a:	f7fe f993 	bl	80007a4 <HAL_GetTick>
 800247e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002480:	e00a      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002482:	f7fe f98f 	bl	80007a4 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002490:	4293      	cmp	r3, r2
 8002492:	d901      	bls.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e113      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002498:	2302      	movs	r3, #2
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
 80024a4:	2302      	movs	r3, #2
 80024a6:	623b      	str	r3, [r7, #32]
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	61fb      	str	r3, [r7, #28]
  return result;
 80024b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	095b      	lsrs	r3, r3, #5
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d108      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80024c6:	4b01      	ldr	r3, [pc, #4]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	e00d      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40007000 	.word	0x40007000
 80024d4:	10908100 	.word	0x10908100
 80024d8:	2302      	movs	r3, #2
 80024da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	4b78      	ldr	r3, [pc, #480]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	2202      	movs	r2, #2
 80024ea:	613a      	str	r2, [r7, #16]
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	fa92 f2a2 	rbit	r2, r2
 80024f2:	60fa      	str	r2, [r7, #12]
  return result;
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	fab2 f282 	clz	r2, r2
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	f002 021f 	and.w	r2, r2, #31
 8002506:	2101      	movs	r1, #1
 8002508:	fa01 f202 	lsl.w	r2, r1, r2
 800250c:	4013      	ands	r3, r2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0b7      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002512:	4b6d      	ldr	r3, [pc, #436]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	496a      	ldr	r1, [pc, #424]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002520:	4313      	orrs	r3, r2
 8002522:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002524:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002528:	2b01      	cmp	r3, #1
 800252a:	d105      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252c:	4b66      	ldr	r3, [pc, #408]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	4a65      	ldr	r2, [pc, #404]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002536:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002544:	4b60      	ldr	r3, [pc, #384]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	f023 0203 	bic.w	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	495d      	ldr	r1, [pc, #372]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002552:	4313      	orrs	r3, r2
 8002554:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d008      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002562:	4b59      	ldr	r3, [pc, #356]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	4956      	ldr	r1, [pc, #344]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002570:	4313      	orrs	r3, r2
 8002572:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002580:	4b51      	ldr	r3, [pc, #324]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002584:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	494e      	ldr	r1, [pc, #312]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800258e:	4313      	orrs	r3, r2
 8002590:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	2b00      	cmp	r3, #0
 800259c:	d008      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800259e:	4b4a      	ldr	r3, [pc, #296]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f023 0210 	bic.w	r2, r3, #16
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	4947      	ldr	r1, [pc, #284]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80025bc:	4b42      	ldr	r3, [pc, #264]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	493f      	ldr	r1, [pc, #252]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d008      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025da:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f023 0220 	bic.w	r2, r3, #32
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4938      	ldr	r1, [pc, #224]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025f8:	4b33      	ldr	r3, [pc, #204]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	4930      	ldr	r1, [pc, #192]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002606:	4313      	orrs	r3, r2
 8002608:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	2b00      	cmp	r3, #0
 8002614:	d008      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002616:	4b2c      	ldr	r3, [pc, #176]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	4929      	ldr	r1, [pc, #164]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002624:	4313      	orrs	r3, r2
 8002626:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002634:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	4921      	ldr	r1, [pc, #132]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264e:	2b00      	cmp	r3, #0
 8002650:	d008      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	491a      	ldr	r1, [pc, #104]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002660:	4313      	orrs	r3, r2
 8002662:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002670:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	4912      	ldr	r1, [pc, #72]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800267e:	4313      	orrs	r3, r2
 8002680:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d008      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	490b      	ldr	r1, [pc, #44]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800269c:	4313      	orrs	r3, r2
 800269e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b8:	4903      	ldr	r1, [pc, #12]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3748      	adds	r7, #72	; 0x48
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000

080026cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e040      	b.n	8002760 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7fd ff1c 	bl	800052c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2224      	movs	r2, #36	; 0x24
 80026f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0201 	bic.w	r2, r2, #1
 8002708:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fb90 	bl	8002e30 <UART_SetConfig>
 8002710:	4603      	mov	r3, r0
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e022      	b.n	8002760 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 fd58 	bl	80031d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002736:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002746:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 fddf 	bl	800331c <UART_CheckIdleState>
 800275e:	4603      	mov	r3, r0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002768:	b480      	push	{r7}
 800276a:	b08b      	sub	sp, #44	; 0x2c
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	4613      	mov	r3, r2
 8002774:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800277a:	2b20      	cmp	r3, #32
 800277c:	d147      	bne.n	800280e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <HAL_UART_Transmit_IT+0x22>
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e040      	b.n	8002810 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	88fa      	ldrh	r2, [r7, #6]
 8002798:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	88fa      	ldrh	r2, [r7, #6]
 80027a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2221      	movs	r2, #33	; 0x21
 80027b6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c0:	d107      	bne.n	80027d2 <HAL_UART_Transmit_IT+0x6a>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d103      	bne.n	80027d2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4a13      	ldr	r2, [pc, #76]	; (800281c <HAL_UART_Transmit_IT+0xb4>)
 80027ce:	66da      	str	r2, [r3, #108]	; 0x6c
 80027d0:	e002      	b.n	80027d8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4a12      	ldr	r2, [pc, #72]	; (8002820 <HAL_UART_Transmit_IT+0xb8>)
 80027d6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	e853 3f00 	ldrex	r3, [r3]
 80027e4:	613b      	str	r3, [r7, #16]
   return(result);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	623b      	str	r3, [r7, #32]
 80027f8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fa:	69f9      	ldr	r1, [r7, #28]
 80027fc:	6a3a      	ldr	r2, [r7, #32]
 80027fe:	e841 2300 	strex	r3, r2, [r1]
 8002802:	61bb      	str	r3, [r7, #24]
   return(result);
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e6      	bne.n	80027d8 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	e000      	b.n	8002810 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800280e:	2302      	movs	r3, #2
  }
}
 8002810:	4618      	mov	r0, r3
 8002812:	372c      	adds	r7, #44	; 0x2c
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	080036e7 	.word	0x080036e7
 8002820:	0800362f 	.word	0x0800362f

08002824 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b0ba      	sub	sp, #232	; 0xe8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800284a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800284e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002852:	4013      	ands	r3, r2
 8002854:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002858:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d115      	bne.n	800288c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00f      	beq.n	800288c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800286c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b00      	cmp	r3, #0
 8002876:	d009      	beq.n	800288c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 82ab 	beq.w	8002dd8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	4798      	blx	r3
      }
      return;
 800288a:	e2a5      	b.n	8002dd8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800288c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 8117 	beq.w	8002ac4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80028a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80028a6:	4b85      	ldr	r3, [pc, #532]	; (8002abc <HAL_UART_IRQHandler+0x298>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 810a 	beq.w	8002ac4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80028b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d011      	beq.n	80028e0 <HAL_UART_IRQHandler+0xbc>
 80028bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00b      	beq.n	80028e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2201      	movs	r2, #1
 80028ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028d6:	f043 0201 	orr.w	r2, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d011      	beq.n	8002910 <HAL_UART_IRQHandler+0xec>
 80028ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00b      	beq.n	8002910 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2202      	movs	r2, #2
 80028fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002906:	f043 0204 	orr.w	r2, r3, #4
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d011      	beq.n	8002940 <HAL_UART_IRQHandler+0x11c>
 800291c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00b      	beq.n	8002940 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2204      	movs	r2, #4
 800292e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002936:	f043 0202 	orr.w	r2, r3, #2
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d017      	beq.n	800297c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800294c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b00      	cmp	r3, #0
 8002956:	d105      	bne.n	8002964 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800295c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00b      	beq.n	800297c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2208      	movs	r2, #8
 800296a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002972:	f043 0208 	orr.w	r2, r3, #8
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800297c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002984:	2b00      	cmp	r3, #0
 8002986:	d012      	beq.n	80029ae <HAL_UART_IRQHandler+0x18a>
 8002988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800298c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00c      	beq.n	80029ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800299c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029a4:	f043 0220 	orr.w	r2, r3, #32
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 8211 	beq.w	8002ddc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80029ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00d      	beq.n	80029e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f6:	2b40      	cmp	r3, #64	; 0x40
 80029f8:	d005      	beq.n	8002a06 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80029fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d04f      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fd97 	bl	800353a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b40      	cmp	r3, #64	; 0x40
 8002a18:	d141      	bne.n	8002a9e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3308      	adds	r3, #8
 8002a20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a28:	e853 3f00 	ldrex	r3, [r3]
 8002a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	3308      	adds	r3, #8
 8002a42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a56:	e841 2300 	strex	r3, r2, [r1]
 8002a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1d9      	bne.n	8002a1a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d013      	beq.n	8002a96 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a72:	4a13      	ldr	r2, [pc, #76]	; (8002ac0 <HAL_UART_IRQHandler+0x29c>)
 8002a74:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fd ffe8 	bl	8000a50 <HAL_DMA_Abort_IT>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d017      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a90:	4610      	mov	r0, r2
 8002a92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a94:	e00f      	b.n	8002ab6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f9b4 	bl	8002e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a9c:	e00b      	b.n	8002ab6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f9b0 	bl	8002e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa4:	e007      	b.n	8002ab6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f9ac 	bl	8002e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002ab4:	e192      	b.n	8002ddc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab6:	bf00      	nop
    return;
 8002ab8:	e190      	b.n	8002ddc <HAL_UART_IRQHandler+0x5b8>
 8002aba:	bf00      	nop
 8002abc:	04000120 	.word	0x04000120
 8002ac0:	08003603 	.word	0x08003603

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	f040 814b 	bne.w	8002d64 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8144 	beq.w	8002d64 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 813d 	beq.w	8002d64 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2210      	movs	r2, #16
 8002af0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afc:	2b40      	cmp	r3, #64	; 0x40
 8002afe:	f040 80b5 	bne.w	8002c6c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b0e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 8164 	beq.w	8002de0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b22:	429a      	cmp	r2, r3
 8002b24:	f080 815c 	bcs.w	8002de0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	f000 8086 	beq.w	8002c4a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b4a:	e853 3f00 	ldrex	r3, [r3]
 8002b4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b6c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b70:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b74:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b78:	e841 2300 	strex	r3, r2, [r1]
 8002b7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1da      	bne.n	8002b3e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	3308      	adds	r3, #8
 8002b8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b92:	e853 3f00 	ldrex	r3, [r3]
 8002b96:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b9a:	f023 0301 	bic.w	r3, r3, #1
 8002b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002bac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002bb0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002bb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bb8:	e841 2300 	strex	r3, r2, [r1]
 8002bbc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002bbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1e1      	bne.n	8002b88 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3308      	adds	r3, #8
 8002bca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bce:	e853 3f00 	ldrex	r3, [r3]
 8002bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3308      	adds	r3, #8
 8002be4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002be8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002bee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bf0:	e841 2300 	strex	r3, r2, [r1]
 8002bf4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1e3      	bne.n	8002bc4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c12:	e853 3f00 	ldrex	r3, [r3]
 8002c16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c1a:	f023 0310 	bic.w	r3, r3, #16
 8002c1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c2e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c34:	e841 2300 	strex	r3, r2, [r1]
 8002c38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1e4      	bne.n	8002c0a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fd feca 	bl	80009de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	4619      	mov	r1, r3
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f8d7 	bl	8002e18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c6a:	e0b9      	b.n	8002de0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80ab 	beq.w	8002de4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002c8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 80a6 	beq.w	8002de4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca0:	e853 3f00 	ldrex	r3, [r3]
 8002ca4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cba:	647b      	str	r3, [r7, #68]	; 0x44
 8002cbc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cc2:	e841 2300 	strex	r3, r2, [r1]
 8002cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1e4      	bne.n	8002c98 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3308      	adds	r3, #8
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	e853 3f00 	ldrex	r3, [r3]
 8002cdc:	623b      	str	r3, [r7, #32]
   return(result);
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	f023 0301 	bic.w	r3, r3, #1
 8002ce4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3308      	adds	r3, #8
 8002cee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002cf2:	633a      	str	r2, [r7, #48]	; 0x30
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cfa:	e841 2300 	strex	r3, r2, [r1]
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1e3      	bne.n	8002cce <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	e853 3f00 	ldrex	r3, [r3]
 8002d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0310 	bic.w	r3, r3, #16
 8002d2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d40:	69b9      	ldr	r1, [r7, #24]
 8002d42:	69fa      	ldr	r2, [r7, #28]
 8002d44:	e841 2300 	strex	r3, r2, [r1]
 8002d48:	617b      	str	r3, [r7, #20]
   return(result);
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1e4      	bne.n	8002d1a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f85b 	bl	8002e18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d62:	e03f      	b.n	8002de4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00e      	beq.n	8002d8e <HAL_UART_IRQHandler+0x56a>
 8002d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fd37 	bl	80037fa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d8c:	e02d      	b.n	8002dea <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00e      	beq.n	8002db8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d008      	beq.n	8002db8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d01c      	beq.n	8002de8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	4798      	blx	r3
    }
    return;
 8002db6:	e017      	b.n	8002de8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d012      	beq.n	8002dea <HAL_UART_IRQHandler+0x5c6>
 8002dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00c      	beq.n	8002dea <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 fce8 	bl	80037a6 <UART_EndTransmit_IT>
    return;
 8002dd6:	e008      	b.n	8002dea <HAL_UART_IRQHandler+0x5c6>
      return;
 8002dd8:	bf00      	nop
 8002dda:	e006      	b.n	8002dea <HAL_UART_IRQHandler+0x5c6>
    return;
 8002ddc:	bf00      	nop
 8002dde:	e004      	b.n	8002dea <HAL_UART_IRQHandler+0x5c6>
      return;
 8002de0:	bf00      	nop
 8002de2:	e002      	b.n	8002dea <HAL_UART_IRQHandler+0x5c6>
      return;
 8002de4:	bf00      	nop
 8002de6:	e000      	b.n	8002dea <HAL_UART_IRQHandler+0x5c6>
    return;
 8002de8:	bf00      	nop
  }

}
 8002dea:	37e8      	adds	r7, #232	; 0xe8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e5e:	f023 030c 	bic.w	r3, r3, #12
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	6979      	ldr	r1, [r7, #20]
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4aa7      	ldr	r2, [pc, #668]	; (8003148 <UART_SetConfig+0x318>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d120      	bne.n	8002ef2 <UART_SetConfig+0xc2>
 8002eb0:	4ba6      	ldr	r3, [pc, #664]	; (800314c <UART_SetConfig+0x31c>)
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d817      	bhi.n	8002eec <UART_SetConfig+0xbc>
 8002ebc:	a201      	add	r2, pc, #4	; (adr r2, 8002ec4 <UART_SetConfig+0x94>)
 8002ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec2:	bf00      	nop
 8002ec4:	08002ed5 	.word	0x08002ed5
 8002ec8:	08002ee1 	.word	0x08002ee1
 8002ecc:	08002ee7 	.word	0x08002ee7
 8002ed0:	08002edb 	.word	0x08002edb
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	77fb      	strb	r3, [r7, #31]
 8002ed8:	e0b5      	b.n	8003046 <UART_SetConfig+0x216>
 8002eda:	2302      	movs	r3, #2
 8002edc:	77fb      	strb	r3, [r7, #31]
 8002ede:	e0b2      	b.n	8003046 <UART_SetConfig+0x216>
 8002ee0:	2304      	movs	r3, #4
 8002ee2:	77fb      	strb	r3, [r7, #31]
 8002ee4:	e0af      	b.n	8003046 <UART_SetConfig+0x216>
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	77fb      	strb	r3, [r7, #31]
 8002eea:	e0ac      	b.n	8003046 <UART_SetConfig+0x216>
 8002eec:	2310      	movs	r3, #16
 8002eee:	77fb      	strb	r3, [r7, #31]
 8002ef0:	e0a9      	b.n	8003046 <UART_SetConfig+0x216>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a96      	ldr	r2, [pc, #600]	; (8003150 <UART_SetConfig+0x320>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d124      	bne.n	8002f46 <UART_SetConfig+0x116>
 8002efc:	4b93      	ldr	r3, [pc, #588]	; (800314c <UART_SetConfig+0x31c>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f08:	d011      	beq.n	8002f2e <UART_SetConfig+0xfe>
 8002f0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f0e:	d817      	bhi.n	8002f40 <UART_SetConfig+0x110>
 8002f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f14:	d011      	beq.n	8002f3a <UART_SetConfig+0x10a>
 8002f16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f1a:	d811      	bhi.n	8002f40 <UART_SetConfig+0x110>
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <UART_SetConfig+0xf8>
 8002f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f24:	d006      	beq.n	8002f34 <UART_SetConfig+0x104>
 8002f26:	e00b      	b.n	8002f40 <UART_SetConfig+0x110>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	77fb      	strb	r3, [r7, #31]
 8002f2c:	e08b      	b.n	8003046 <UART_SetConfig+0x216>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	77fb      	strb	r3, [r7, #31]
 8002f32:	e088      	b.n	8003046 <UART_SetConfig+0x216>
 8002f34:	2304      	movs	r3, #4
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	e085      	b.n	8003046 <UART_SetConfig+0x216>
 8002f3a:	2308      	movs	r3, #8
 8002f3c:	77fb      	strb	r3, [r7, #31]
 8002f3e:	e082      	b.n	8003046 <UART_SetConfig+0x216>
 8002f40:	2310      	movs	r3, #16
 8002f42:	77fb      	strb	r3, [r7, #31]
 8002f44:	e07f      	b.n	8003046 <UART_SetConfig+0x216>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a82      	ldr	r2, [pc, #520]	; (8003154 <UART_SetConfig+0x324>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d124      	bne.n	8002f9a <UART_SetConfig+0x16a>
 8002f50:	4b7e      	ldr	r3, [pc, #504]	; (800314c <UART_SetConfig+0x31c>)
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002f58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f5c:	d011      	beq.n	8002f82 <UART_SetConfig+0x152>
 8002f5e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f62:	d817      	bhi.n	8002f94 <UART_SetConfig+0x164>
 8002f64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f68:	d011      	beq.n	8002f8e <UART_SetConfig+0x15e>
 8002f6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f6e:	d811      	bhi.n	8002f94 <UART_SetConfig+0x164>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <UART_SetConfig+0x14c>
 8002f74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f78:	d006      	beq.n	8002f88 <UART_SetConfig+0x158>
 8002f7a:	e00b      	b.n	8002f94 <UART_SetConfig+0x164>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	77fb      	strb	r3, [r7, #31]
 8002f80:	e061      	b.n	8003046 <UART_SetConfig+0x216>
 8002f82:	2302      	movs	r3, #2
 8002f84:	77fb      	strb	r3, [r7, #31]
 8002f86:	e05e      	b.n	8003046 <UART_SetConfig+0x216>
 8002f88:	2304      	movs	r3, #4
 8002f8a:	77fb      	strb	r3, [r7, #31]
 8002f8c:	e05b      	b.n	8003046 <UART_SetConfig+0x216>
 8002f8e:	2308      	movs	r3, #8
 8002f90:	77fb      	strb	r3, [r7, #31]
 8002f92:	e058      	b.n	8003046 <UART_SetConfig+0x216>
 8002f94:	2310      	movs	r3, #16
 8002f96:	77fb      	strb	r3, [r7, #31]
 8002f98:	e055      	b.n	8003046 <UART_SetConfig+0x216>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a6e      	ldr	r2, [pc, #440]	; (8003158 <UART_SetConfig+0x328>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d124      	bne.n	8002fee <UART_SetConfig+0x1be>
 8002fa4:	4b69      	ldr	r3, [pc, #420]	; (800314c <UART_SetConfig+0x31c>)
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002fac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fb0:	d011      	beq.n	8002fd6 <UART_SetConfig+0x1a6>
 8002fb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fb6:	d817      	bhi.n	8002fe8 <UART_SetConfig+0x1b8>
 8002fb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fbc:	d011      	beq.n	8002fe2 <UART_SetConfig+0x1b2>
 8002fbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fc2:	d811      	bhi.n	8002fe8 <UART_SetConfig+0x1b8>
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <UART_SetConfig+0x1a0>
 8002fc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fcc:	d006      	beq.n	8002fdc <UART_SetConfig+0x1ac>
 8002fce:	e00b      	b.n	8002fe8 <UART_SetConfig+0x1b8>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	77fb      	strb	r3, [r7, #31]
 8002fd4:	e037      	b.n	8003046 <UART_SetConfig+0x216>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	77fb      	strb	r3, [r7, #31]
 8002fda:	e034      	b.n	8003046 <UART_SetConfig+0x216>
 8002fdc:	2304      	movs	r3, #4
 8002fde:	77fb      	strb	r3, [r7, #31]
 8002fe0:	e031      	b.n	8003046 <UART_SetConfig+0x216>
 8002fe2:	2308      	movs	r3, #8
 8002fe4:	77fb      	strb	r3, [r7, #31]
 8002fe6:	e02e      	b.n	8003046 <UART_SetConfig+0x216>
 8002fe8:	2310      	movs	r3, #16
 8002fea:	77fb      	strb	r3, [r7, #31]
 8002fec:	e02b      	b.n	8003046 <UART_SetConfig+0x216>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a5a      	ldr	r2, [pc, #360]	; (800315c <UART_SetConfig+0x32c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d124      	bne.n	8003042 <UART_SetConfig+0x212>
 8002ff8:	4b54      	ldr	r3, [pc, #336]	; (800314c <UART_SetConfig+0x31c>)
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003000:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003004:	d011      	beq.n	800302a <UART_SetConfig+0x1fa>
 8003006:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800300a:	d817      	bhi.n	800303c <UART_SetConfig+0x20c>
 800300c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003010:	d011      	beq.n	8003036 <UART_SetConfig+0x206>
 8003012:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003016:	d811      	bhi.n	800303c <UART_SetConfig+0x20c>
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <UART_SetConfig+0x1f4>
 800301c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003020:	d006      	beq.n	8003030 <UART_SetConfig+0x200>
 8003022:	e00b      	b.n	800303c <UART_SetConfig+0x20c>
 8003024:	2300      	movs	r3, #0
 8003026:	77fb      	strb	r3, [r7, #31]
 8003028:	e00d      	b.n	8003046 <UART_SetConfig+0x216>
 800302a:	2302      	movs	r3, #2
 800302c:	77fb      	strb	r3, [r7, #31]
 800302e:	e00a      	b.n	8003046 <UART_SetConfig+0x216>
 8003030:	2304      	movs	r3, #4
 8003032:	77fb      	strb	r3, [r7, #31]
 8003034:	e007      	b.n	8003046 <UART_SetConfig+0x216>
 8003036:	2308      	movs	r3, #8
 8003038:	77fb      	strb	r3, [r7, #31]
 800303a:	e004      	b.n	8003046 <UART_SetConfig+0x216>
 800303c:	2310      	movs	r3, #16
 800303e:	77fb      	strb	r3, [r7, #31]
 8003040:	e001      	b.n	8003046 <UART_SetConfig+0x216>
 8003042:	2310      	movs	r3, #16
 8003044:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800304e:	d15b      	bne.n	8003108 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003050:	7ffb      	ldrb	r3, [r7, #31]
 8003052:	2b08      	cmp	r3, #8
 8003054:	d827      	bhi.n	80030a6 <UART_SetConfig+0x276>
 8003056:	a201      	add	r2, pc, #4	; (adr r2, 800305c <UART_SetConfig+0x22c>)
 8003058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305c:	08003081 	.word	0x08003081
 8003060:	08003089 	.word	0x08003089
 8003064:	08003091 	.word	0x08003091
 8003068:	080030a7 	.word	0x080030a7
 800306c:	08003097 	.word	0x08003097
 8003070:	080030a7 	.word	0x080030a7
 8003074:	080030a7 	.word	0x080030a7
 8003078:	080030a7 	.word	0x080030a7
 800307c:	0800309f 	.word	0x0800309f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003080:	f7ff f930 	bl	80022e4 <HAL_RCC_GetPCLK1Freq>
 8003084:	61b8      	str	r0, [r7, #24]
        break;
 8003086:	e013      	b.n	80030b0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003088:	f7ff f94e 	bl	8002328 <HAL_RCC_GetPCLK2Freq>
 800308c:	61b8      	str	r0, [r7, #24]
        break;
 800308e:	e00f      	b.n	80030b0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003090:	4b33      	ldr	r3, [pc, #204]	; (8003160 <UART_SetConfig+0x330>)
 8003092:	61bb      	str	r3, [r7, #24]
        break;
 8003094:	e00c      	b.n	80030b0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003096:	f7ff f8af 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 800309a:	61b8      	str	r0, [r7, #24]
        break;
 800309c:	e008      	b.n	80030b0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800309e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030a2:	61bb      	str	r3, [r7, #24]
        break;
 80030a4:	e004      	b.n	80030b0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	77bb      	strb	r3, [r7, #30]
        break;
 80030ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 8082 	beq.w	80031bc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	005a      	lsls	r2, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	085b      	lsrs	r3, r3, #1
 80030c2:	441a      	add	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	2b0f      	cmp	r3, #15
 80030d2:	d916      	bls.n	8003102 <UART_SetConfig+0x2d2>
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030da:	d212      	bcs.n	8003102 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	f023 030f 	bic.w	r3, r3, #15
 80030e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	085b      	lsrs	r3, r3, #1
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	89fb      	ldrh	r3, [r7, #14]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	89fa      	ldrh	r2, [r7, #14]
 80030fe:	60da      	str	r2, [r3, #12]
 8003100:	e05c      	b.n	80031bc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	77bb      	strb	r3, [r7, #30]
 8003106:	e059      	b.n	80031bc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003108:	7ffb      	ldrb	r3, [r7, #31]
 800310a:	2b08      	cmp	r3, #8
 800310c:	d835      	bhi.n	800317a <UART_SetConfig+0x34a>
 800310e:	a201      	add	r2, pc, #4	; (adr r2, 8003114 <UART_SetConfig+0x2e4>)
 8003110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003114:	08003139 	.word	0x08003139
 8003118:	08003141 	.word	0x08003141
 800311c:	08003165 	.word	0x08003165
 8003120:	0800317b 	.word	0x0800317b
 8003124:	0800316b 	.word	0x0800316b
 8003128:	0800317b 	.word	0x0800317b
 800312c:	0800317b 	.word	0x0800317b
 8003130:	0800317b 	.word	0x0800317b
 8003134:	08003173 	.word	0x08003173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003138:	f7ff f8d4 	bl	80022e4 <HAL_RCC_GetPCLK1Freq>
 800313c:	61b8      	str	r0, [r7, #24]
        break;
 800313e:	e021      	b.n	8003184 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003140:	f7ff f8f2 	bl	8002328 <HAL_RCC_GetPCLK2Freq>
 8003144:	61b8      	str	r0, [r7, #24]
        break;
 8003146:	e01d      	b.n	8003184 <UART_SetConfig+0x354>
 8003148:	40013800 	.word	0x40013800
 800314c:	40021000 	.word	0x40021000
 8003150:	40004400 	.word	0x40004400
 8003154:	40004800 	.word	0x40004800
 8003158:	40004c00 	.word	0x40004c00
 800315c:	40005000 	.word	0x40005000
 8003160:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003164:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <UART_SetConfig+0x3a4>)
 8003166:	61bb      	str	r3, [r7, #24]
        break;
 8003168:	e00c      	b.n	8003184 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800316a:	f7ff f845 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 800316e:	61b8      	str	r0, [r7, #24]
        break;
 8003170:	e008      	b.n	8003184 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003176:	61bb      	str	r3, [r7, #24]
        break;
 8003178:	e004      	b.n	8003184 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	77bb      	strb	r3, [r7, #30]
        break;
 8003182:	bf00      	nop
    }

    if (pclk != 0U)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d018      	beq.n	80031bc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	085a      	lsrs	r2, r3, #1
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	441a      	add	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b0f      	cmp	r3, #15
 80031a2:	d909      	bls.n	80031b8 <UART_SetConfig+0x388>
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031aa:	d205      	bcs.n	80031b8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60da      	str	r2, [r3, #12]
 80031b6:	e001      	b.n	80031bc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80031c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	007a1200 	.word	0x007a1200

080031d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00a      	beq.n	8003202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01a      	beq.n	80032ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032d6:	d10a      	bne.n	80032ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	605a      	str	r2, [r3, #4]
  }
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b098      	sub	sp, #96	; 0x60
 8003320:	af02      	add	r7, sp, #8
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800332c:	f7fd fa3a 	bl	80007a4 <HAL_GetTick>
 8003330:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b08      	cmp	r3, #8
 800333e:	d12e      	bne.n	800339e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003348:	2200      	movs	r2, #0
 800334a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f88c 	bl	800346c <UART_WaitOnFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d021      	beq.n	800339e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003362:	e853 3f00 	ldrex	r3, [r3]
 8003366:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800336e:	653b      	str	r3, [r7, #80]	; 0x50
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003378:	647b      	str	r3, [r7, #68]	; 0x44
 800337a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800337e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003380:	e841 2300 	strex	r3, r2, [r1]
 8003384:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e6      	bne.n	800335a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e062      	b.n	8003464 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d149      	bne.n	8003440 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b4:	2200      	movs	r2, #0
 80033b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f856 	bl	800346c <UART_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d03c      	beq.n	8003440 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	e853 3f00 	ldrex	r3, [r3]
 80033d2:	623b      	str	r3, [r7, #32]
   return(result);
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033e4:	633b      	str	r3, [r7, #48]	; 0x30
 80033e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ec:	e841 2300 	strex	r3, r2, [r1]
 80033f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1e6      	bne.n	80033c6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3308      	adds	r3, #8
 80033fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	e853 3f00 	ldrex	r3, [r3]
 8003406:	60fb      	str	r3, [r7, #12]
   return(result);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0301 	bic.w	r3, r3, #1
 800340e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3308      	adds	r3, #8
 8003416:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003418:	61fa      	str	r2, [r7, #28]
 800341a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341c:	69b9      	ldr	r1, [r7, #24]
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	e841 2300 	strex	r3, r2, [r1]
 8003424:	617b      	str	r3, [r7, #20]
   return(result);
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e5      	bne.n	80033f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e011      	b.n	8003464 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2220      	movs	r2, #32
 800344a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3758      	adds	r7, #88	; 0x58
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	4613      	mov	r3, r2
 800347a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800347c:	e049      	b.n	8003512 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003484:	d045      	beq.n	8003512 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003486:	f7fd f98d 	bl	80007a4 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	429a      	cmp	r2, r3
 8003494:	d302      	bcc.n	800349c <UART_WaitOnFlagUntilTimeout+0x30>
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e048      	b.n	8003532 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d031      	beq.n	8003512 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d110      	bne.n	80034de <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2208      	movs	r2, #8
 80034c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f838 	bl	800353a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2208      	movs	r2, #8
 80034ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e029      	b.n	8003532 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ec:	d111      	bne.n	8003512 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 f81e 	bl	800353a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e00f      	b.n	8003532 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69da      	ldr	r2, [r3, #28]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4013      	ands	r3, r2
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	429a      	cmp	r2, r3
 8003520:	bf0c      	ite	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	2300      	movne	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	429a      	cmp	r2, r3
 800352e:	d0a6      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800353a:	b480      	push	{r7}
 800353c:	b095      	sub	sp, #84	; 0x54
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003552:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003560:	643b      	str	r3, [r7, #64]	; 0x40
 8003562:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003564:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003566:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003568:	e841 2300 	strex	r3, r2, [r1]
 800356c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1e6      	bne.n	8003542 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3308      	adds	r3, #8
 800357a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	e853 3f00 	ldrex	r3, [r3]
 8003582:	61fb      	str	r3, [r7, #28]
   return(result);
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f023 0301 	bic.w	r3, r3, #1
 800358a:	64bb      	str	r3, [r7, #72]	; 0x48
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3308      	adds	r3, #8
 8003592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003594:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800359a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800359c:	e841 2300 	strex	r3, r2, [r1]
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e5      	bne.n	8003574 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d118      	bne.n	80035e2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	e853 3f00 	ldrex	r3, [r3]
 80035bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f023 0310 	bic.w	r3, r3, #16
 80035c4:	647b      	str	r3, [r7, #68]	; 0x44
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ce:	61bb      	str	r3, [r7, #24]
 80035d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d2:	6979      	ldr	r1, [r7, #20]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	e841 2300 	strex	r3, r2, [r1]
 80035da:	613b      	str	r3, [r7, #16]
   return(result);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1e6      	bne.n	80035b0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80035f6:	bf00      	nop
 80035f8:	3754      	adds	r7, #84	; 0x54
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f7ff fbef 	bl	8002e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003626:	bf00      	nop
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800362e:	b480      	push	{r7}
 8003630:	b08f      	sub	sp, #60	; 0x3c
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800363a:	2b21      	cmp	r3, #33	; 0x21
 800363c:	d14d      	bne.n	80036da <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003644:	b29b      	uxth	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d132      	bne.n	80036b0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	e853 3f00 	ldrex	r3, [r3]
 8003656:	61fb      	str	r3, [r7, #28]
   return(result);
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800365e:	637b      	str	r3, [r7, #52]	; 0x34
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800366a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800366e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003670:	e841 2300 	strex	r3, r2, [r1]
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1e6      	bne.n	800364a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	e853 3f00 	ldrex	r3, [r3]
 8003688:	60bb      	str	r3, [r7, #8]
   return(result);
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003690:	633b      	str	r3, [r7, #48]	; 0x30
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	61bb      	str	r3, [r7, #24]
 800369c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369e:	6979      	ldr	r1, [r7, #20]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	e841 2300 	strex	r3, r2, [r1]
 80036a6:	613b      	str	r3, [r7, #16]
   return(result);
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1e6      	bne.n	800367c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80036ae:	e014      	b.n	80036da <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	b292      	uxth	r2, r2
 80036bc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80036da:	bf00      	nop
 80036dc:	373c      	adds	r7, #60	; 0x3c
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b091      	sub	sp, #68	; 0x44
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036f2:	2b21      	cmp	r3, #33	; 0x21
 80036f4:	d151      	bne.n	800379a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d132      	bne.n	8003768 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	623b      	str	r3, [r7, #32]
   return(result);
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003716:	63bb      	str	r3, [r7, #56]	; 0x38
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003720:	633b      	str	r3, [r7, #48]	; 0x30
 8003722:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003724:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003728:	e841 2300 	strex	r3, r2, [r1]
 800372c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e6      	bne.n	8003702 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	e853 3f00 	ldrex	r3, [r3]
 8003740:	60fb      	str	r3, [r7, #12]
   return(result);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003748:	637b      	str	r3, [r7, #52]	; 0x34
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003752:	61fb      	str	r3, [r7, #28]
 8003754:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003756:	69b9      	ldr	r1, [r7, #24]
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	e841 2300 	strex	r3, r2, [r1]
 800375e:	617b      	str	r3, [r7, #20]
   return(result);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1e6      	bne.n	8003734 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003766:	e018      	b.n	800379a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800376e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003770:	881a      	ldrh	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800377a:	b292      	uxth	r2, r2
 800377c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003782:	1c9a      	adds	r2, r3, #2
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800379a:	bf00      	nop
 800379c:	3744      	adds	r7, #68	; 0x44
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b088      	sub	sp, #32
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d0:	6979      	ldr	r1, [r7, #20]
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	e841 2300 	strex	r3, r2, [r1]
 80037d8:	613b      	str	r3, [r7, #16]
   return(result);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1e6      	bne.n	80037ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff faff 	bl	8002df0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037f2:	bf00      	nop
 80037f4:	3720      	adds	r7, #32
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <__libc_init_array>:
 8003810:	b570      	push	{r4, r5, r6, lr}
 8003812:	4d0d      	ldr	r5, [pc, #52]	; (8003848 <__libc_init_array+0x38>)
 8003814:	4c0d      	ldr	r4, [pc, #52]	; (800384c <__libc_init_array+0x3c>)
 8003816:	1b64      	subs	r4, r4, r5
 8003818:	10a4      	asrs	r4, r4, #2
 800381a:	2600      	movs	r6, #0
 800381c:	42a6      	cmp	r6, r4
 800381e:	d109      	bne.n	8003834 <__libc_init_array+0x24>
 8003820:	4d0b      	ldr	r5, [pc, #44]	; (8003850 <__libc_init_array+0x40>)
 8003822:	4c0c      	ldr	r4, [pc, #48]	; (8003854 <__libc_init_array+0x44>)
 8003824:	f000 f820 	bl	8003868 <_init>
 8003828:	1b64      	subs	r4, r4, r5
 800382a:	10a4      	asrs	r4, r4, #2
 800382c:	2600      	movs	r6, #0
 800382e:	42a6      	cmp	r6, r4
 8003830:	d105      	bne.n	800383e <__libc_init_array+0x2e>
 8003832:	bd70      	pop	{r4, r5, r6, pc}
 8003834:	f855 3b04 	ldr.w	r3, [r5], #4
 8003838:	4798      	blx	r3
 800383a:	3601      	adds	r6, #1
 800383c:	e7ee      	b.n	800381c <__libc_init_array+0xc>
 800383e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003842:	4798      	blx	r3
 8003844:	3601      	adds	r6, #1
 8003846:	e7f2      	b.n	800382e <__libc_init_array+0x1e>
 8003848:	080038b8 	.word	0x080038b8
 800384c:	080038b8 	.word	0x080038b8
 8003850:	080038b8 	.word	0x080038b8
 8003854:	080038bc 	.word	0x080038bc

08003858 <memset>:
 8003858:	4402      	add	r2, r0
 800385a:	4603      	mov	r3, r0
 800385c:	4293      	cmp	r3, r2
 800385e:	d100      	bne.n	8003862 <memset+0xa>
 8003860:	4770      	bx	lr
 8003862:	f803 1b01 	strb.w	r1, [r3], #1
 8003866:	e7f9      	b.n	800385c <memset+0x4>

08003868 <_init>:
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	bf00      	nop
 800386c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386e:	bc08      	pop	{r3}
 8003870:	469e      	mov	lr, r3
 8003872:	4770      	bx	lr

08003874 <_fini>:
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003876:	bf00      	nop
 8003878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387a:	bc08      	pop	{r3}
 800387c:	469e      	mov	lr, r3
 800387e:	4770      	bx	lr
